<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>最小生成树 - 标签 - 退思轩</title><link>https://kwang.life/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</link><description>最小生成树 - 标签 - 退思轩</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>suda.ivywk@gmail.com (Kai Wang)</managingEditor><webMaster>suda.ivywk@gmail.com (Kai Wang)</webMaster><copyright>本作品采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可</copyright><lastBuildDate>Sun, 20 Oct 2013 21:33:00 +0800</lastBuildDate><atom:link href="https://kwang.life/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/" rel="self" type="application/rss+xml"/><item><title>算法专题：最小生成树 – Kruskal Algoritm</title><link>https://kwang.life/2013/10/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-kruskal-algoritm/</link><pubDate>Sun, 20 Oct 2013 21:33:00 +0800</pubDate><author>作者</author><guid>https://kwang.life/2013/10/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-kruskal-algoritm/</guid><description><![CDATA[<p>今天来介绍一下最小生成树的另外一种算法：Kruskal Algorithm。这个算法是基于贪心实现的，算法的大体过程如下：</p>
<ul>
<li>取权值最小的边，如果加入这条边以后，不会出现环，那么就加入这条边。</li>
<li>重复上述操作，直至加入了 $ N-1 $ 条边。</li>
</ul>
<p>我们还是先来看一张图片来理解一下这个算法：</p>
<figure><a class="lightgallery" href="/images/2013/%e7%ae%97%e6%b3%95%e4%b8%93%e9%a2%98%ef%bc%9a%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91%20%e2%80%93%20Kruskal%20Algoritm/Kruskal.png" title="/images/2013/算法专题：最小生成树 – Kruskal Algoritm/Kruskal.png" data-thumbnail="/images/2013/算法专题：最小生成树 – Kruskal Algoritm/Kruskal.png" data-sub-html="<h2>Kruskal 算法</h2>">
        
    </a><figcaption class="image-caption">Kruskal 算法</figcaption>
    </figure>
<p>下面我们来考虑这个算法，最棘手的问题是判断是否构成环，这里我们采用并查集来处理这个问题，它的复杂度是 $ O\left(V*\alpha\left(V\right)\right) $ 。对于每次寻找权值最小的边，复杂度是 $ O\left(E\right) $ 。这样一来，复杂度将高达 $ O\left(V*\alpha\left(V\right)+VE\right) $ ，即 $ O\left(VE\right) $ 。</p>
<p>我们考虑优化，每次寻找权值最小的边，可以考虑先将权值从小到大排序。这样复杂度就下降到 $ O\left(V*\alpha\left(V\right)+E\log{E}\right) $ ，即 $ O\left(E\log{E}\right) $ 。</p>
<p>代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Edge</span>
<span class="p">{</span>
    <span class="n">Edge</span><span class="p">(</span><span class="kt">int</span> <span class="n">_u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_w</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">u</span> <span class="o">=</span> <span class="n">_u</span><span class="p">;</span> <span class="n">v</span> <span class="o">=</span> <span class="n">_v</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">_w</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">Set</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nParent</span><span class="p">,</span> <span class="n">nCount</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">Edge</span> <span class="n">x</span><span class="p">,</span> <span class="n">Edge</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">w</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;</span> <span class="n">pEdge</span><span class="p">;</span>
<span class="n">Set</span> <span class="n">pSet</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">Kruskal</span><span class="p">();</span>
<span class="kt">void</span> <span class="nf">Init</span><span class="p">();</span>
<span class="kt">int</span> <span class="nf">Find</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">Union</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">u</span> <span class="o">&gt;&gt;</span> <span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">w</span><span class="p">;</span>
        <span class="n">pEdge</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">Kruskal</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Kruskal</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nCost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;</span> <span class="n">pMST</span><span class="p">;</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">pEdge</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">pEdge</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">cmp</span><span class="p">);</span>
    <span class="n">Init</span><span class="p">();</span>
    <span class="k">while</span><span class="p">(</span><span class="n">pMST</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>    <span class="c1">// 直到MST中有N-1条边
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="n">Edge</span> <span class="n">minEdge</span> <span class="o">=</span> <span class="n">pEdge</span><span class="p">[</span><span class="n">nPos</span><span class="o">++</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">Find</span><span class="p">(</span><span class="n">minEdge</span><span class="p">.</span><span class="n">u</span><span class="p">)</span> <span class="o">!=</span> <span class="n">Find</span><span class="p">(</span><span class="n">minEdge</span><span class="p">.</span><span class="n">v</span><span class="p">))</span>    <span class="c1">// 如果加入后不构成环
</span><span class="c1"></span>        <span class="p">{</span>
            <span class="n">nCost</span> <span class="o">+=</span> <span class="n">minEdge</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
            <span class="n">pMST</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">minEdge</span><span class="p">);</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">minEdge</span><span class="p">.</span><span class="n">u</span><span class="p">,</span> <span class="n">minEdge</span><span class="p">.</span><span class="n">v</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;The MST Cost is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">nCost</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> 

<span class="kt">void</span> <span class="nf">Init</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">pSet</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">nParent</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="n">pSet</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">nCount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">Find</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pSet</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">nParent</span> <span class="o">!=</span> <span class="n">x</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">pSet</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">nParent</span> <span class="o">=</span> <span class="n">Find</span><span class="p">(</span><span class="n">pSet</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">nParent</span><span class="p">);</span>        <span class="c1">// 路径压缩
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Union</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">fx</span> <span class="o">=</span> <span class="n">Find</span><span class="p">(</span><span class="n">pSet</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">nParent</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">fy</span> <span class="o">=</span> <span class="n">Find</span><span class="p">(</span><span class="n">pSet</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">nParent</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fx</span> <span class="o">!=</span> <span class="n">fy</span><span class="p">)</span>    <span class="c1">// 启发式合并，减小树的高度
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">pSet</span><span class="p">[</span><span class="n">fx</span><span class="p">].</span><span class="n">nCount</span> <span class="o">&gt;</span> <span class="n">pSet</span><span class="p">[</span><span class="n">fy</span><span class="p">].</span><span class="n">nCount</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">pSet</span><span class="p">[</span><span class="n">fy</span><span class="p">].</span><span class="n">nParent</span> <span class="o">=</span> <span class="n">fx</span><span class="p">;</span>
            <span class="n">pSet</span><span class="p">[</span><span class="n">fx</span><span class="p">].</span><span class="n">nCount</span> <span class="o">+=</span> <span class="n">pSet</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">nCount</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">pSet</span><span class="p">[</span><span class="n">fx</span><span class="p">].</span><span class="n">nParent</span> <span class="o">=</span> <span class="n">fy</span><span class="p">;</span>
            <span class="n">pSet</span><span class="p">[</span><span class="n">fy</span><span class="p">].</span><span class="n">nCount</span> <span class="o">+=</span> <span class="n">pSet</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">nCount</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>至此，最小生成树的算法基本复习完毕。</p>
<p>分析两种算法，Prim Algorithm的复杂度是 $ O\left(V^{2}\right) $ ，适用于稠密图；而Kruskal Algorithm的复杂度是 $ O\left(E\log{E}\right) $ ，适用于疏密图。各有所长，需要根据不同的情况选择不同的算法。</p>
]]></description></item><item><title>算法专题：最小生成树 – Prim Algoritm</title><link>https://kwang.life/2013/10/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-prim-algoritm/</link><pubDate>Sat, 19 Oct 2013 21:30:00 +0800</pubDate><author>作者</author><guid>https://kwang.life/2013/10/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-prim-algoritm/</guid><description><![CDATA[<p>最近开始准备 NOIP 复赛，发现很多算法已经不会了。只能一个个的捡起来，慢慢复习，顺便做点笔记。</p>
<p>最小生成树（Minimum Spanning Trees），简称 MST。是图论中一个非常重要的概念。解决这个问题有两种算法，今天暂且先来讨论一下 Prim Algorithm。不做特别说明，讨论的都是无向图。</p>
<p>首先介绍一下最小生成树的概念，我们知道，图可以这样定义 $ G=\left(V,E\right) $ ，其中 $ G $ 表示图， $ V $ 表示顶点集合， $ E $ 表示边集合。最小生成树是这样一棵树，它满足 $$ w\left ( T \right )=\min {\left \{ \sum_{\left ( u,v \right )\in T}w\left ( u,v \right ) \right \}} $$ 通俗地讲，就是使得图 $ G $ 连通时，所选取的边的长度的和最小。</p>
<figure><a class="lightgallery" href="/images/2013/%e7%ae%97%e6%b3%95%e4%b8%93%e9%a2%98%ef%bc%9a%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91%20%e2%80%93%20Prim%20Algoritm/MST.jpg" title="/images/2013/算法专题：最小生成树 – Prim Algoritm/MST.jpg" data-thumbnail="/images/2013/算法专题：最小生成树 – Prim Algoritm/MST.jpg" data-sub-html="<h2>最小生成树</h2>">
        
    </a><figcaption class="image-caption">最小生成树</figcaption>
    </figure>
<p>如上图，加粗的路径就是在最小生成树上的路径。</p>
<p>现在，我们开始讨论Prim Algorithm。这个算法可以分为下面几个步骤：</p>
<ul>
<li>将顶点集 $ V $ 分成两个集合 $ A $ 和 $ B $ ，其中集合 $ A $ 表示目前已经在MST中的顶点，而集合 $ B $ 则表示目前不在 MST 中的顶点。</li>
<li>寻找与集合 $ A $ 连通的最短的边 $ \left(u,v\right) $ ，将这条边加入最小生成树中。（此时，与 $ \left(u,v\right) $ 相连的顶点，不妨设为 $ B_{i} $ ，也应加入集合 $ A $ 中）</li>
<li>重复第二步，直至集合 $ B $ 为空集。</li>
</ul>
<p>算法的大体思想就是这样了。为了方便理解，我们先来看一下下面一张图片：</p>
<figure><a class="lightgallery" href="/images/2013/%e7%ae%97%e6%b3%95%e4%b8%93%e9%a2%98%ef%bc%9a%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91%20%e2%80%93%20Prim%20Algoritm/Prim.png" title="/images/2013/算法专题：最小生成树 – Prim Algoritm/Prim.png" data-thumbnail="/images/2013/算法专题：最小生成树 – Prim Algoritm/Prim.png" data-sub-html="<h2>Prim 算法</h2>">
        
    </a><figcaption class="image-caption">Prim 算法</figcaption>
    </figure>
<p>对照上面的图片，想必对于 Prim Algorithm 也有了一定的理解。</p>
<p>下面我们来设计算法，显然，我们需要遍历集合 $ A $ 中所有顶点及与之相连的边，取连接到集合 $ B $ 的权值最小的边，加入最小生成树。这样一来，复杂度将达到 $ O\left(n^{3}\right) $ 。</p>
<p>我们可以对这个想法进行优化。我们维护一个 $ pCost\left [ i \right ] $ 数组，用来表示从集合 $ A $ 到与之相邻的节点的最小费用。这样，我们只要每次取这个数组中的最小值，把它在集合 $ B $ 中所对应的结点 $ V_{i} $ 加入到集合 $ A $ 中。每次加入结束以后，都要更新 $ pCost\left [ i \right ] $ 数组。即枚举所有与结点 $ V_{i} $ 相连的边，判断是否比 $ pCost\left [ i \right ] $ 数组中的最小费用小，如果比它小，则更新。这样可以将算法优化到 $ O\left(n^{2}\right) $ 。</p>
<p>代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;memory.h&gt; </span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>        <span class="c1">// 设置最大权值 
</span><span class="c1"></span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">pMap</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>    <span class="c1">// 邻接表 
</span><span class="c1"></span>
<span class="kt">void</span> <span class="nf">Prim</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">u</span> <span class="o">&gt;&gt;</span> <span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">w</span><span class="p">;</span>
        <span class="n">pMap</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">));</span>
        <span class="n">pMap</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">w</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">Prim</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Prim</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nCost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pMST</span><span class="p">;</span>    <span class="c1">// 储存MST的结点 
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">pCost</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>        <span class="c1">// 储存与集合A相邻的顶点的最小权值，0表示该结点已经在MST中
</span><span class="c1"></span>    <span class="n">pMST</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>    <span class="c1">// 将结点1加入MST
</span><span class="c1"></span>    <span class="n">pCost</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>    <span class="c1">// 初始化，切记要将除1以外的都置为INF
</span><span class="c1"></span>    <span class="p">{</span> <span class="n">pCost</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span> <span class="p">}</span>    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pMap</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>        <span class="c1">// 处理与结点1相连的顶点
</span><span class="c1"></span>    <span class="p">{</span> <span class="n">pCost</span><span class="p">[</span><span class="n">pMap</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">pMap</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>        <span class="c1">// 剩余N-1个顶点，循环N-1次
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">nVertex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nWeight</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>        <span class="c1">// 用于寻找最短的边
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nWeight</span> <span class="o">&gt;</span> <span class="n">pCost</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">pCost</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">nVertex</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                <span class="n">nWeight</span> <span class="o">=</span> <span class="n">pCost</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">pCost</span><span class="p">[</span><span class="n">nVertex</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">pMST</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nVertex</span><span class="p">);</span>    <span class="c1">// 将节点nVertex加入MST
</span><span class="c1"></span>
        <span class="n">nCost</span> <span class="o">+=</span> <span class="n">nWeight</span><span class="p">;</span>    <span class="c1">// 计算MST的费用
</span><span class="c1"></span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>    <span class="c1">// 更新pCost数组
</span><span class="c1"></span>        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">pCost</span><span class="p">[</span><span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">first</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> 
                <span class="n">pCost</span><span class="p">[</span><span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">first</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">second</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">pCost</span><span class="p">[</span><span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">pMap</span><span class="p">[</span><span class="n">nVertex</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;MST Cost is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">nCost</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;The vertexs in MST are &#34;</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pMST</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pMST</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span> <span class="p">}</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>