<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>不定方程 - 标签 - 退思轩</title><link>https://example.com/tags/%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</link><description>不定方程 - 标签 - 退思轩</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>suda.ivywk@gmail.com (Kai Wang)</managingEditor><webMaster>suda.ivywk@gmail.com (Kai Wang)</webMaster><copyright>本作品采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可</copyright><lastBuildDate>Mon, 04 Nov 2013 19:41:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/" rel="self" type="application/rss+xml"/><item><title>算法专题：不定方程</title><link>https://example.com/2013/11/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</link><pubDate>Mon, 04 Nov 2013 19:41:00 +0800</pubDate><author>作者</author><guid>https://example.com/2013/11/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</guid><description><![CDATA[<p>关于这个算法，主要是参考 NOIP2012 Day2 T1。即这里所讲的是求解这样一个线性模方程： $$ ax\equiv 1\mod{p} $$ 的最小正整数解。</p>
<p>去年我是暴搜做的，当时什么都不会。今天在这里介绍两种算法，一种是我国古代数学家秦九韶发明的「大衍求一术」，还一种是著名的「扩展欧几里德算法」。</p>
<p>首先来看一下大衍求一术。这里只介绍它的计算方法，至于证明可以参考扩展欧几里德算法。</p>
<p><strong>例1</strong>：求解方程 $ 23x\equiv 1\mod{97} $ 。</p>
<p><strong>解</strong>：我们只需要列出下面这张表就可以得到求解 $$ \begin{matrix}23^{1} &amp; 23^{1} &amp; 3^{17} &amp; 3^{17} &amp; 1^{38}\\ 97^{0} &amp; 5^{4} &amp; 5^{4} &amp; 2^{21} &amp; 2^{21}\end{matrix} $$ 结果就是 38。</p>
<p>接下来我们来理论化的表述一下这个算法的过程：</p>
<p>假设输入 $ a,b $ 满足 $ a&gt;b $ 。那么我们用 $ a_{n},A_{n} $ 分别表示第一行的底数和奇数， $ b_{n},B_{n} $ 分别表示第二行的底数和奇数，如果 $ a_{i}&gt;b_{i} $ ，那么 $ a_{i+1}=a_{i}\mod{b_{i}},A_{i+1}=A_{i}+B_{i}\cdot \left [ \frac{a_{i}}{b_{i}} \right ],b_{i+1}=b_{i},B_{i+1}=B_{i} $ ；如果 $ a_{i}&lt;b_{i} $ 则上面的结论倒过来即可。</p>
<p>算法结束当且仅当 $ a_{i}=1 $ ，此时 $ A_{i} $ 即为所求的最小正整数解。</p>
<p><strong>例2</strong>：求解方程 $ 97x\equiv 1\mod{23} $ 。</p>
<p><strong>解</strong>：我们只需要列出下面这张表就可以得到求解 $$ \begin{matrix}97^{1} &amp; 5^{1} &amp; 5^{1} &amp; 2^{5} &amp; 2^{5} &amp; \\ 23^{0} &amp; 23^{0} &amp; 3^{4} &amp; 3^{4} &amp; 1^{9} &amp; 1^{14}\end{matrix} $$ 结果就是 14。</p>
<p>对于这个结果，如果1最先出现在下面一行，则需要再计算一次，而且这次计算必须使得余数是1。</p>
<p>假设输入 $ a,b $ 满足 $ a&lt;b $ 。中间的步骤和之前一行，在计算过程中必然存在一个 $ i $ 使得 $ b_{i}=1 $ ，此时我们只需计算 $ B_{i+1} $ 即可得到结果。其中 $ B_{i+1}=A_{i}+B_{i}\cdot \left(a_{i} - 1\right) $ 。</p>
<p>代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Num</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nBase</span><span class="p">,</span> <span class="n">nIndex</span><span class="p">;</span>    <span class="c1">// 分别表示底数和奇数
</span><span class="c1"></span><span class="p">};</span>

<span class="n">Num</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">&gt;&gt;</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="c1">// 初始化
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>    <span class="c1">// 循环出口
</span><span class="c1"></span>            <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">)</span>    <span class="c1">// 模拟计算过程
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">nDiv</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">/</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">{</span> <span class="n">nDiv</span><span class="o">--</span><span class="p">;</span> <span class="p">}</span>
                <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%=</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">+=</span> <span class="n">nDiv</span> <span class="o">*</span> <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">nDiv</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">{</span> <span class="n">nDiv</span><span class="o">--</span><span class="p">;</span> <span class="p">}</span>
                <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%=</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">+=</span> <span class="n">nDiv</span> <span class="o">*</span> <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>    <span class="c1">// 出口
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">nDiv</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">nDiv</span> <span class="o">*</span> <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">+</span> <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>    <span class="c1">// 求出结果
</span><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">)</span>    <span class="c1">// 模拟计算过程
</span><span class="c1"></span>            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">nDiv</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">/</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">{</span> <span class="n">nDiv</span><span class="o">--</span><span class="p">;</span> <span class="p">}</span>
                <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%=</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">+=</span> <span class="n">nDiv</span> <span class="o">*</span> <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">nDiv</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">{</span> <span class="n">nDiv</span><span class="o">--</span><span class="p">;</span> <span class="p">}</span>
                <span class="n">x</span><span class="p">.</span><span class="n">nBase</span> <span class="o">%=</span> <span class="n">y</span><span class="p">.</span><span class="n">nBase</span><span class="p">;</span>
                <span class="n">x</span><span class="p">.</span><span class="n">nIndex</span> <span class="o">+=</span> <span class="n">nDiv</span> <span class="o">*</span> <span class="n">y</span><span class="p">.</span><span class="n">nIndex</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可能上面的算法对于某些人来说比较晦涩，我们下面来介绍一下扩展欧几里德算法。首先介绍一个定理：</p>
<p><strong>方程 $ ax+by=\gcd\left ( a,b \right ) $ 一定有解。</strong></p>
<p>这样我们的问题就可以转化为求方程 $ ax+b\cdot \left ( -y \right )=1 $ ，在这里，我们先求出方程 $ ax+b\cdot \left ( -y \right )=\gcd\left(a,b\right) $ 的解，然后只要将结果除以 $ \gcd\left(a,b\right) $ 就行了。</p>
<p>下面来推导一下扩展欧几里德算法。</p>
<p>我们已知 $$ ax+by=\gcd\left ( a,b \right ) $$ 且 $$ \gcd\left ( a,b \right )=\gcd\left(b,a\mod b \right ) $$ 不妨设 $$ bx{}'+\left ( a\mod b \right )y{}'=\gcd\left ( b,a\mod b \right ) $$ 此时就有 $$ bx{}'+\left ( a\mod b \right )y{}'=ax+by $$ 展开得到 $$ bx{}'+\left ( a-\left [ \frac{a}{b} \right ]\cdot b \right )y{}'=ax+by $$ 化简得 $$ ay{}'+b\left (x{}'-\left [ \frac{a}{b} \right ]\cdot y{}'  \right )=ax+by $$ 因此可以得到 $$ x=y{}',y=x{}'-\left [ \frac{a}{b} \right ]\cdot y{}' $$ 这样我们就可以用递归来实现扩展欧几里德算法了。</p>
<p>代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">LL</span><span class="p">;</span>

<span class="n">LL</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">X</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="n">LL</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">LL</span> <span class="n">a</span><span class="p">,</span> <span class="n">LL</span> <span class="n">b</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">exgcd</span><span class="p">(</span><span class="n">LL</span> <span class="n">a</span><span class="p">,</span> <span class="n">LL</span> <span class="n">b</span><span class="p">,</span> <span class="n">LL</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">LL</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">A</span> <span class="o">&gt;&gt;</span> <span class="n">B</span><span class="p">;</span>
    <span class="n">C</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span>
    <span class="n">exgcd</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="o">-</span><span class="n">B</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="n">X</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">X</span> <span class="o">+=</span> <span class="n">B</span><span class="p">;</span> <span class="p">}</span>    <span class="c1">// 找最小正整数
</span><span class="c1"></span>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">X</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">exgcd</span><span class="p">(</span><span class="n">LL</span> <span class="n">a</span><span class="p">,</span> <span class="n">LL</span> <span class="n">b</span><span class="p">,</span> <span class="n">LL</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">LL</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">C</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span>    <span class="c1">// 边界
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">exgcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>        <span class="c1">// 递推公式
</span><span class="c1"></span>        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">C</span> <span class="o">-</span> <span class="n">b</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">LL</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">LL</span> <span class="n">a</span><span class="p">,</span> <span class="n">LL</span> <span class="n">b</span><span class="p">)</span>    <span class="c1">// 求解最大公倍数
</span><span class="c1"></span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>相比之下扩展欧几里德更容易理解一点，并且没有大衍求一术那么多特殊情况要处理，比较方便。</p>
]]></description></item></channel></rss>