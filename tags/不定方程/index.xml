<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>不定方程 on 退思轩</title>
    <link>https://kwang.life/tags/%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</link>
    <description>Recent content in 不定方程 on 退思轩</description>
    <image>
      <title>退思轩</title>
      <url>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Nov 2013 19:41:00 +0800</lastBuildDate><atom:link href="https://kwang.life/tags/%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法专题：不定方程</title>
      <link>https://kwang.life/2013/11/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Mon, 04 Nov 2013 19:41:00 +0800</pubDate>
      
      <guid>https://kwang.life/2013/11/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</guid>
      <description>关于这个算法，主要是参考 NOIP2012 Day2 T1。即这里所讲的是求解这样一个线性模方程： $$ ax\equiv 1\mod{p} $$ 的最小正整数解。
去年我是暴搜做的，当时什么都不会。今天在这里介绍两种算法，一种是我国古代数学家秦九韶发明的「大衍求一术」，还一种是著名的「扩展欧几里德算法」。
首先来看一下大衍求一术。这里只介绍它的计算方法，至于证明可以参考扩展欧几里德算法。
例1：求解方程 $ 23x\equiv 1\mod{97} $ 。
解：我们只需要列出下面这张表就可以得到求解 $$ \begin{matrix}23^{1} &amp;amp; 23^{1} &amp;amp; 3^{17} &amp;amp; 3^{17} &amp;amp; 1^{38}\\ 97^{0} &amp;amp; 5^{4} &amp;amp; 5^{4} &amp;amp; 2^{21} &amp;amp; 2^{21}\end{matrix} $$ 结果就是 38。
接下来我们来理论化的表述一下这个算法的过程：
假设输入 $ a,b $ 满足 $ a&amp;gt;b $ 。那么我们用 $ a_{n},A_{n} $ 分别表示第一行的底数和奇数， $ b_{n},B_{n} $ 分别表示第二行的底数和奇数，如果 $ a_{i}&amp;gt;b_{i} $ ，那么 $ a_{i+1}=a_{i}\mod{b_{i}},A_{i+1}=A_{i}+B_{i}\cdot \left [ \frac{a_{i}}{b_{i}} \right ],b_{i+1}=b_{i},B_{i+1}=B_{i} $ ；如果 $ a_{i}&amp;lt;b_{i} $ 则上面的结论倒过来即可。</description>
    </item>
    
  </channel>
</rss>
