<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ACM-ICPC on 退思轩</title>
    <link>https://kwang.life/tags/acm-icpc/</link>
    <description>Recent content in ACM-ICPC on 退思轩</description>
    <image>
      <title>退思轩</title>
      <url>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Apr 2016 22:40:00 +0800</lastBuildDate><atom:link href="https://kwang.life/tags/acm-icpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>再见了，ACM-ICPC</title>
      <link>https://kwang.life/posts/2016/%E5%86%8D%E8%A7%81%E4%BA%86acm-icpc/</link>
      <pubDate>Tue, 05 Apr 2016 22:40:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2016/%E5%86%8D%E8%A7%81%E4%BA%86acm-icpc/</guid>
      <description>终于还是来到了这一天，当双手在键盘上敲下这些文字的时候，竟有些颤抖。尽管曾经不止一次的思考过退役后的场景，也做足了充分的思想准备，但当这一刻真的到来，却有些不知所措。看着 ACM 交流群里热烈的讨论，关上窗口，退出该群；将 ACM 资料小心翼翼的放置在移动硬盘的角落，不小心瞥见 NOIP 退役时存放的资料，记忆一下子席卷而来。在算法竞赛的道路上跌跌撞撞的行走了将近五年，从 NOIP 到 ICPC，是时候说再见了。
此时的我，依然记得多年前第一次提交 A+B 时的激动，记得思索半天推导出 Segment Tree 时的满足，记得苦思冥想理解 Dancing Links 时的欣喜，记得写完几本草稿本后证明 Binary Indexed Tree 时的顿悟，记得那无数个奉献给《数据结构》和《算法导论》的日日夜夜，记得一遍遍的 WA 和随之而来的 AC。记得那一个个打训练赛的下午，匆匆忙忙地胡乱吃完从后庄带来了晚饭，便投入下一场比赛。记得水平日渐提高时的欣喜以及发挥失常后的焦急。
那无数在实验室刷题的时光，除了让我体会到了较之高三更为枯燥的生活，却也给我带来了些许快乐。一群人讨论时事热点时的激烈，徐老师突击检查时的尴尬，准备题目汇报时的担心，为新生赛出题的忙碌，准备新生授课的紧张以及北疆饭店里的谈笑风生都将成为珍贵的记忆，小小的实验室，承载着一群人的梦想，不断的奋斗，只为接近更广阔的天空。
四场比赛，从上海开始，再到长春，辗转北京，最后回到上海，两铜两银，在最后的 EC-Final 中夺得银牌，虽然无缘 World Final，但也算是个不错的成绩。
第一场比赛是华东理工大学承办的上海邀请赛，铜牌，身为常年铁牌的弱校选手，第一次参赛拿到一块铜牌也是意料之外。回来以后便和队友商量，区域赛一定要拿到苏州大学的首枚银牌。第二场比赛是东北师范大学承办的亚洲区域赛（长春站），在我们奋力拼搏五个小时以后成功收获一枚铜牌，为此队友们都低落了许久，徐老师却安慰我们好好准备，还有机会。第三场比赛是北京大学承办的亚洲区域赛（北京站），银牌，不负所望，成功晋级 EC-Final。最后一场便是上海大学承办的 EC-Final，以银牌收尾。
我的算法竞赛道路也就到此结束了，退役的原因很多，一方面作为一名电院的学生，本身课业压力较大，无暇分心；另一方面也是想多接触一些工程，将所学的算法竞赛知识运用于实践。
故事很长，就像一场长长的宴会，大家说说笑笑，戛然而止，来不及一一道别。
感谢一路帮助过我的父母、老师和朋友，陪伴我度过快乐的 ACM 生涯。
感谢曾经的队友，我会记得你们 CARRY 过我的每一场比赛。
感谢 ACM 交流群，和大家谈笑风生是我的荣幸。
最后，愿我们都前程似锦。
春回大地，万物复苏，时值交配，黯闻吾凯退役，悲恸难舍。
wuli 凯凯，伟大的哲♂学家，算法家，数学家，无产阶级手速学家，双蛋炒饭鉴赏家，曾以 22 发 hack 一举闻名于世，聪慧厉行，为人果断，擅长 a 题，世所罕见，虽偶遇坎坷，非十多发而不能 a 者，然刚烈之精神永存。
嗟乎，写作王凯，读作 dān shēng gǒu，与君谈笑风生，恍在昨日。荣辱浮沉，皆明日黄花，望君行趁早，唯约不得的妹子与舍友，不可辜负。
——高可攀</description>
    </item>
    
    <item>
      <title>记 2015 ACM-ICPC亚洲区域赛（长春站、北京站）</title>
      <link>https://kwang.life/posts/2015/%E8%AE%B0-2015-acm-icpc%E4%BA%9A%E6%B4%B2%E5%8C%BA%E5%9F%9F%E8%B5%9B%E9%95%BF%E6%98%A5%E7%AB%99%E5%8C%97%E4%BA%AC%E7%AB%99/</link>
      <pubDate>Fri, 20 Nov 2015 21:50:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/%E8%AE%B0-2015-acm-icpc%E4%BA%9A%E6%B4%B2%E5%8C%BA%E5%9F%9F%E8%B5%9B%E9%95%BF%E6%98%A5%E7%AB%99%E5%8C%97%E4%BA%AC%E7%AB%99/</guid>
      <description>细细想来，已经有近四个月没有更新过博客，上一次还是在 7 月份。既然这样，那就从那时候讲起吧。
整个暑假，绝大部分时间在参加 ACM 训练，除此之外，还参加了全国大学生电子设计竞赛，拿了个一般的奖项；去英国走了一遭，体会了不同的风土人情。一直想好好记录这两件事情，但总是由于各种各样的原因搁置了。
这学期自从开学以来就一直非常的忙，刚开始备战 ACM，上个月在长春拿了一块铜牌，上星期在北京拿了一块银牌，周三刚刚把 FPGA 设计邀请赛的作品完成，明天一大早赶往上海交通大学参加微软 Hackthon 大赛，下周需要提交全国移动互联网开发大赛的作品，再加上最近期中考试周，几乎忙的没日没夜。
这几天难得有个喘息的机会来，却发现自己已难以适应如此清闲的生活了。思来想去，不如把这两次比赛过程中的所见所闻写下来，权当回忆罢。虽然前往北方这两个城市的目的是比赛，但是我却希望在这篇文章中淡化比赛的内容，一来比赛的内容对于大多数读者来说较为陌生，如果不是参加过类似的比赛，很难感同身受；二来比赛的情况已经反思总结过，也没有必要再拿出来写一遍。因此，我想尽可能的把整篇文章的重点放在整个旅途的过程，我所见到的、遇到的人和事。
当暑假里进行的网络预选赛结束时，我便想去北方的赛区经历一番，主要原因是没有出过什么远门，想出去见识一番，顺便可以拿个奖回来。最终分配给我们队伍前往长春（东北师范大学）、北京（北京大学）这两个赛区。
先来说说长春赛区，这也是我第二次坐高铁，第一次是去年的上海邀请赛，可以参阅《记 2015 ACM-ICPC 上海大都会赛》。从苏州到长春，11 个小时、1000 多公里的路途，体验了从短袖到毛衣的气候与风景。在去的途中，坐在我边上的是一位在苏州从事医疗工作的长春人，听说我是苏州大学的学生，便和我聊了起来，不停地向我推荐长春的旅游地点，使我深切的感受到了东北人民的热情。
当然，到达长春的时候，我才发现曾经的东三省，如今是如此的破旧。可能由于气候的原因吧，晚上七八点钟在路上已经看不到什么营业的门店，大多都已打烊。所幸当时并没有暖气，所以空气质量虽然不是很好，但还能接受。
报道的时候，专门负责接待我们学校的志愿者早已等候多时，这也不由得使我感到一阵惊喜。简单的手续后，志愿者在我们带队老师的请求下，带领我们参观了东北师范大学。学校不大，但是富有现代气息，宿舍楼更是高达二十层，此外，我们还去了隔壁吉林大学串门。第一天走下来的感觉便是破旧，即便是白天，想要在大街上找一家像模像样的超市也非常的困难。
第二天，我们便开始了正式的比赛，从上午 9 点到下午 2 点结束，然后颁奖，闭幕式。吃完晚饭，一直到晚上 6 点才结束。接下来却无奈的强行被拉到 KTV 唱歌以庆祝比赛顺利结束。晚上 9 点多钟出来，同学叫来了吉林大学的同学，想让他带我们逛街，然而正如前文所说，所有的商店都已关门，我们就这样在黑夜中顶着零下一度的温度在东北的马路边行走，最终回到宾馆附近的一家烧烤店吃了夜宵才回去睡了。
在归途中，由于接下来要考试，所以便一直在复习。当我准备休息一会的时候，坐在我边上的旅客突然跟我说，你解微分方程的速度真快。于是便聊了起来，对方表示已经工作，希望我能够在大学里好好学习。临走时戏谑地说，我要是再跟你聊下去，就要和你去苏州了。
经历的第一次的失败，我们非常希望能够在北京赛区拿到一块银牌，也算是对自己过往训练的一种肯定。但是我们都知道，北京是所有赛区中难度最大的，因为所有的强队基本都会去，而奖牌是根据百分比来评定的。也就是说，同等的成绩，可能在长春可以拿到一块铜牌，到北京，可能连一个牌都拿不到。因此，这一个月大家都或多或少的有些许压力。最后两次训练赛的时候进入了银牌区或许给了我们些许宽慰。
前往北京的旅途虽然不及长春的一半，但却更加艰难。由于比赛与一门考试冲突，在院教务主任、院长、校教务之间辗转多次，终于办完了缓考申请，院长签字的时候，语重心长的说：好好比，拿一块银牌回来。
当我走下动车，踏上北京的土地，感受到的是帝都强烈的雾霾，直教人难以呼吸，以至于后来拍照时竟然以为自己的摄像头坏了。当我们来到宾馆，看到破烂不堪的房间和高昂的住宿费，不禁感叹帝都人民的生活。与长春类似，我们报到当天参观了北京大学，这座历史悠久的名校，在未名湖畔，眺望密檐宝塔。感受到了强烈的文化冲击，或许这就是一个学校应该积淀下来、传承下去的东西吧。
正式比赛时，进入场馆，不禁怔住。这是 2008 年承办北京奥运会乒乓球比赛的场馆，头顶“Beijing 2008”的字样依旧一尘不染，展现着它的光辉。开幕式时，各位国际嘉宾纷纷致辞，中英对照，使人仿佛置身于国际决赛的现场。5 个小时的比赛很快便过去了，而颁奖阶段，却着实进行了两个多小时。这使得一位与我相识多年特地从北京师范大学赶来希望和我见一面的网友在寒风中等待了一个多小时，颁奖典礼结束后，我才得以从场馆出来迎接他。
我们多年的交流虽然只是通过电磁波作为媒介传递着消息，但当我们真正见面时，却如同多年老友一样亲切。在北大艺苑餐厅吃完晚餐，稍作闲逛，便和他前往北京师范大学游玩。当我晚上 8 点多钟坐地铁返回北京大学时，在夜色中，来到一个邮筒旁，投递了近十张明信片，也算作是和朋友分享自己的所见所闻。
今年的比赛也就随着北京赛区的结束而落幕了。</description>
    </item>
    
    <item>
      <title>SGU 144 - Meeting</title>
      <link>https://kwang.life/posts/2015/sgu-144-meeting/</link>
      <pubDate>Wed, 22 Jul 2015 20:46:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-144-meeting/</guid>
      <description>Description Two of the three members of the winning team of one of the ACM regional contests are going to meet in order to train for the upcoming World Finals. They decided that they will meet sometime between $X$ o&amp;rsquo;clock and $Y$ o&amp;rsquo;clock. Because they never get anywhere on time (they were late even on the day of the regional contest), they did not set an exact time when they will meet.</description>
    </item>
    
    <item>
      <title>SGU 116 - Index of super-prime</title>
      <link>https://kwang.life/posts/2015/sgu-116-index-of-super-prime/</link>
      <pubDate>Mon, 20 Jul 2015 13:39:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-116-index-of-super-prime/</guid>
      <description>Description Let $P_1, P_2,\cdots ,P_N,\cdots$ be a sequence of prime numbers. Super-prime number is such a prime number that its current number in prime numbers sequence is a prime number too. For example, 3 is a super-prime number, but 7 is not. Index of super-prime for number is 0 iff it is impossible to present it as a sum of few (maybe one) super-prime numbers, and if such presentation exists, index is equal to minimal number of items in such presentation.</description>
    </item>
    
    <item>
      <title>专题一、简单搜索 - Virtual Judge</title>
      <link>https://kwang.life/posts/2015/%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2-virtual-judge/</link>
      <pubDate>Mon, 08 Jun 2015 21:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2-virtual-judge/</guid>
      <description>很久以前刷完了 Virtual Judge 上的简单搜索专题，现总结如下：
POJ 1321 由于题目的数据范围比较小，可以直接 dfs 暴力。读入时记录每个空位的位置，保存在 pX[] 以及 pY[] 数组中。暴力的时候统计当前处理第几个空格以及当前处理到了第几行即可。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 128; long long ans; int N, K, nCnt; bool pUsed[MAX]; int pX[MAX], pY[MAX]; int pRow[MAX], pCol[MAX]; void dfs(int x, int y); int main() { char dwTmp; while(cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K) { if(N == -1 &amp;amp;&amp;amp; K == -1) { break; } nCnt = 0; ans = 0; for(int i = 1; i &amp;lt;= N; i++) { for(int j = 1; j &amp;lt;= N; j++) { cin &amp;gt;&amp;gt; dwTmp; if(dwTmp == &amp;#39;#&amp;#39;) { nCnt++; pX[nCnt] = i; pY[nCnt] = j; } } cin.</description>
    </item>
    
    <item>
      <title>记 2015 ACM-ICPC 上海大都会赛</title>
      <link>https://kwang.life/posts/2015/%E8%AE%B0-2015-acm-icpc-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/</link>
      <pubDate>Sat, 30 May 2015 09:46:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/%E8%AE%B0-2015-acm-icpc-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/</guid>
      <description>到今天为止，距离 2015 ACM 国际大学生程序设计竞赛上海大都会赛结束已经快有一个星期了，趁着记忆中暂存的些许余温，将其记录下来。
我们从上周四开始，放下手中正在做的题目，转而准备比赛所需要的材料。由于比赛是可以携带纸质材料进场，因此我们准备了一些较为常用的算法模板，并且幻想着可能会遇到类似的题目。然而事实证明，携带的这些模板并没有什么作用，当然，这是后话。
周五晚上，我们开始整理行装。由于第二天早上需要六点半之前集合，所以便早早的入睡了。早上起来稍微打点一下，已是六点。草草地吃了一块面包，关上宿舍门便出发了。走到外面才发现宿舍大门紧闭着，原来此时舍管阿姨依然沉睡在梦乡。走近时才发现，宿舍大门是虚掩的。来到实验室已有两三个人在等候，陆陆续续地都到齐了。
就这样，我们六名队员踏上了前往上海的征途。一路上地铁-动车-地铁-步行，费尽周折终于找到了指导老师早在一个月前为我们预定的酒店。放下行李，躺在床上休息了一会儿，便前往华东理工大学（徐汇校区）报道。无奈一开始不认识道路，以至于耽搁了很久。
报道结束后，领了材料赶去吃中饭，饭菜只能说一般般而已。接下来的开幕式只用了短短的十分钟便结束了，然后便是热身赛（主要用来熟悉比赛场地以及比赛的系统环境）。比赛场地在体育馆内，一共将近两百台电脑，一个队伍（3 名队员）一台电脑（Linux 系统）。裁判拿着话筒选读比赛须知，志愿者则站在门口迎接我们。
在热身赛中，一共有三道题。第一题是高精度乘法（C/C++ 语言内置的变量类型保存的数据是有一定范围限制的，如果要操作成百上千位的一个整数，就需要使用数组来模拟整数的每一位，并且结合竖式的方法，模拟加减乘除运算，称之为高精度算法），我们在短短几分钟内就 AC（Accepted，即作答正确）了。然后在接下来的一个半小时内看着其它队伍的牌子上插满了气球（做出一道题目就会有一个对应的气球），而我们却一直做不出来。第二题直觉是二分图匹配，却不会建立图论模型。第三题已经忘记了。和学长他们一样，我们两个队伍都只做出了第一题。
热身赛结束后便去吃晚饭，一开始有一个 World Final 的选手邀请大家去吃晚饭，当我们走到校门口的时候突然感觉无颜参加这样的集会，就直接回到了宾馆。到这时候才意识到忘记在学校里顺便吃一顿晚饭，于是乎就近找了一家饭店。等到饭上来的时候才发现饭碗小的可怜，而我一连叫了三碗饭，被服务员惊诧的看了几眼。回到宾馆后，做了一场“百度之星”，准备休息的时候，我的队友过来串门，拿了一包薯片，然后发现我的门口被塞了两张卡片，写满了广告。
第二天一大早便起床集合，指导老师徐教授也早早的到了，来到楼下的自助早餐厅，吃了一顿不错的早餐，回到房间再稍做休息便启程出发。来到比赛场馆，坐到昨天的位置上。桌面上放着一个信封，装着三份试题。等到 10 点整的时候，裁判宣布比赛开始，我们打开信封，抽出一张写有登录密码的纸条以及三份试题，开始了紧张的比赛。
第一道做的题目是运用贪心算法的区间覆盖问题，就如热身赛中一样，短短几分钟内就 AC 了。接下来，我又发现了一道表达式求值的题目，发现和前几天做的 Basic 解释器差不多，因此没有多想就开始写代码，提交代码后返回的结果是 TLE（Time Limited Excceded，运行时间超时，题目要求在规定的时间内给出正确的答案）。在队友的提示下，发现这道题目并没有那么简单，因此就将它放到一边。（事实证明，这次的决策是正确的，使得我们在这道题目上浪费过多的事件，一直到比赛结束，只有一个队伍作出了这道题目。）我们 AC 的第二道题目是队友思索了半个小时想来的，一个简洁的公式，再配上一个高精度乘法即可。第三道 AC 的题目是由我和另外一个队友合作完成了，实现一个 Base64 的加密方法（我们使用的是 C++ 语言，而 Java 语言这一加密直接可以调用内部函数，奈何我们都不会）。第四道 AC 的题目我们整整思索了一个半小时，是一道有趣的数学期望问题，可以将它描述出来：
给定一个 $N\times M$ 的方格，每次可以选择这 $N\times M$ 个方格中的任意两个（可以重合），将以这两个方格为左上、右下的矩形方格全部填充上颜色。一共进行 $K$ 次操作，求最后被填充上颜色的方格个数的数学期望。
在此不给出具体解法，读者可以自行思考。至此，我们一共做出了 4 道题目，排名第 34 名，一度以为有银牌了，最后事实证明与银牌擦肩而过。在剩下了的两个半小时内，我们一直在思考另外一道概率题，以及一道数据结构的题目。期间志愿者过来发午餐——85°C 的面包和奶茶，然而却根本没有心思去吃，嚼了几块巧克力便继续思考。
比赛结束以后，举行了一个讲座，主要是给赞助商做一些公司的宣传，希望应届选手前往应聘。颁奖典礼上，得知是铜牌第一的时候，只是感觉自己太弱了。在这期间，终于意识到了自己还没吃午饭，于是吃完了所有的面包。恰巧这是颁奖典礼结束，徐老师说带着我们去吃晚饭，而我刚刚才吃完一袋面包，徐老师说，你怎么吃这么一点点。接下来，地铁-动车-地铁，又踏上了铜牌滚出的路程。
总的来说，第一次参赛给了我很多的经验，这与高中是参与的 NOIP 竞赛不同，更讲究团队合作，以及思维的巧妙，而非看完题目按照常规方法就能够按部就班的解答的。要说这次比赛还能有什么别的意义的话，我想就是圆了我一个从高中就有的参加 ACM 的梦，希望在接下来的 Reginal 中能够赛出更好的成绩吧。</description>
    </item>
    
    <item>
      <title>Dynamic Programming - HDU</title>
      <link>https://kwang.life/posts/2015/dynamic-programming-hdu/</link>
      <pubDate>Sat, 14 Mar 2015 13:22:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/dynamic-programming-hdu/</guid>
      <description>HDU 2955 这是一道概率 DP，我第一次的想法是把概率 $P$ 乘以 100，变成一个背包然后做 0/1 背包，后来发现这样做是错误的。
原因：概率应该是相乘，而不是相加。
后来看了题解想到了另外一种方法，使用逃脱概率来计算，用 $f[j]$ 表示偷走 $j$ 价值后逃脱的概率。易知，多次逃脱概率为每次逃脱概率相乘。这里不使用被逮捕的概率是因为被逮捕的情况比较复杂（例如偷第一件物品不被逮捕，偷第二件物品被逮捕，被逮捕的概率应该为头第一件物品不被逮捕的概率乘以偷第二件物品不被逮捕的概率。），而当我们转而考虑它的对立事件——逃脱时，问题就会变得容易了，因为逃脱的概率永远是相乘的。
更为严格的说法是这样的：设被第 $i$ 个银行逮捕的事件为 $P_i$，那么 $1-\sum{P_i}$ 就是至少被一个银行逮捕的概率，也就是我们所需要求的被逮捕的概率。通过这样的数学上的说理，我们可以证明这一算法是正确的。
由于要计算逃脱概率，我们可以在读入的时候就把可能被逮捕的概率 $P$ 变成可能逃脱的概率 $1 - P$。这样，状态转移方程为：$$ f[j] = \max{\left\{f[j - \mathrm{pValue}[i]] \times \mathrm{pCost}[i], f[j]\right\}}$$ 其中 $\mathrm{pValue}[i]$ 表示第 $i$ 个银行的价值，$\mathrm{pCost}[i]$ 表示偷第 $i$ 个银行逃脱的概率。
这时候，我们还需要考虑一个转移条件，如果 $f[j - \mathrm{pValue}[i]]$ 没有被更新过，那么是不能转移过来的。因为暂时没有一个状态可以偷到 $j - \mathrm{pValue}[i]$ 价值的物品。
接下来，我们要考虑一下初始条件，很显然 $f[0] = 1$，因为不偷任何东西，就不会被逮捕，逃脱的概率就为 1。其余 $f[j] = -1$，其中 $j \neq 0$，表示暂时没有一个状态可以偷到 $j$ 价值的物品。
最后扫一遍 $f[j]$，满足 $1 - f[j] \leq P$ 的最大下标 $j$ 为满足题设条件的答案。</description>
    </item>
    
    <item>
      <title>SGU 114 - Telecasting station</title>
      <link>https://kwang.life/posts/2015/sgu-114-telecasting-station/</link>
      <pubDate>Sat, 07 Mar 2015 19:37:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-114-telecasting-station/</guid>
      <description>Description Every city in Berland is situated on $Ox$ axis. The government of the country decided to build new telecasting station. After many experiments Berland scientists came to a conclusion that in any city citizens displeasure is equal to product of citizens amount in it by distance between city and TV-station. Find such point on $Ox$ axis for station so that sum of displeasures of all cities is minimal.
Input Input begins from line with integer positive number $N$ ($0&amp;lt;N&amp;lt;15000$) – amount of cities in Berland.</description>
    </item>
    
    <item>
      <title>SGU 222 - Little Rooks</title>
      <link>https://kwang.life/posts/2015/sgu-222-little-rooks/</link>
      <pubDate>Sat, 07 Mar 2015 14:26:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-222-little-rooks/</guid>
      <description>Description Inspired by a &amp;ldquo;Little Bishops&amp;rdquo; problem, Petya now wants to solve problem for rooks.
A rook is a piece used in the game of chess which is played on a board of square grids. A rook can only move horizontally and vertically from its current position and two rooks attack each other if one is on the path of the other.
Given two numbers $n$ and $k$, your job is to determine the number of ways one can put $k$ rooks on an $n\times n$ chessboard so that no two of them are in attacking positions.</description>
    </item>
    
    <item>
      <title>SGU 154 - Factorial</title>
      <link>https://kwang.life/posts/2015/sgu-154-factorial/</link>
      <pubDate>Sat, 07 Mar 2015 13:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-154-factorial/</guid>
      <description>Description You task is to find minimal natural number $N$, so that $N!$ contains exactly $Q$ zeroes on the trail in decimal notation. As you know $N! = 1\cdot2\cdots N$. For example, $5! = 120$, 120 contains one zero on the trail.
Input One number $Q$ written in the input ($0\leq Q\leq 10^8$).
Output Write &amp;ldquo;No solution&amp;rdquo;, if there is no such number $N$, and $N$ otherwise.
Sample Input 2 Sample Output 10 Analysis 统计 $N!</description>
    </item>
    
    <item>
      <title>SGU 130 - Circle</title>
      <link>https://kwang.life/posts/2015/sgu-130-circle/</link>
      <pubDate>Sat, 07 Mar 2015 11:04:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-130-circle/</guid>
      <description>Description On a circle border there are $2k$ different points $A_1, A_2, \cdots , A_{2k}$, located contiguously. These points connect $k$ chords so that each of points $A_1, A_2, \cdots, A_{2k}$ is the end point of one chord. Chords divide the circle into parts. You have to find $N$ - the number of different ways to connect the points so that the circle is broken into minimal possible amount of parts $P$.</description>
    </item>
    
    <item>
      <title>SGU 276 - Andrew&#39;s Troubles</title>
      <link>https://kwang.life/posts/2015/sgu-276-andrews-troubles/</link>
      <pubDate>Sat, 07 Mar 2015 09:48:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-276-andrews-troubles/</guid>
      <description>Description Famous Berland ACM-ICPC team Anisovka consists of three programmers: Andrew, Michael and Ilya. A long time ago, during the first few months the team was founded, Andrew was very often late to the trainings and contests. To stimulate Andrew to be more punctual, Ilya and Andrew decided to introduce a new rule for team participants. If somebody is late (i.e. comes at least one second after appointed time) he owes a cup of tea to other team members.</description>
    </item>
    
    <item>
      <title>SGU 126 - Boxes</title>
      <link>https://kwang.life/posts/2015/sgu-126-boxes/</link>
      <pubDate>Sat, 07 Mar 2015 09:28:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-126-boxes/</guid>
      <description>Description There are two boxes. There are $A$ balls in the first box, and $B$ balls in the second box ($0 &amp;lt; A + B &amp;lt; 2147483648$). It is possible to move balls from one box to another. From one box into another one should move as many balls as the other box already contains. You have to determine, whether it is possible to move all balls into one box.</description>
    </item>
    
    <item>
      <title>SGU 118 - Digital Root</title>
      <link>https://kwang.life/posts/2015/sgu-118-digital-root/</link>
      <pubDate>Tue, 24 Feb 2015 15:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-118-digital-root/</guid>
      <description>Description Let $f(n)$ be a sum of digits for positive integer $n$. If $f(n)$ is one-digit number then it is a digital root for $n$ and otherwise digital root of $n$ is equal to digital root of $f(n)$. For example, digital root of 987 is 6. Your task is to find digital root for expression $$ A_1\cdot A_2\cdots A_N + A_1\cdot A_2\cdots A_{N-1} + \cdots + A_1\cdot A_2 + A_1$$</description>
    </item>
    
    <item>
      <title>SGU 117 - Counting</title>
      <link>https://kwang.life/posts/2015/sgu-117-counting/</link>
      <pubDate>Tue, 24 Feb 2015 14:14:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-117-counting/</guid>
      <description>Description Find amount of numbers for given sequence of integer numbers such that after raising them to the $M$-th power they will be divided by $K$.
Input Input consists of two lines. There are three integer numbers $N, M, K$ ($0&amp;lt;N, M, K&amp;lt;10001$) on the first line. There are N positive integer numbers − given sequence (each number is not more than 10001) − on the second line.
Output Write answer for given task.</description>
    </item>
    
    <item>
      <title>SGU 104 - Little shop of flowers</title>
      <link>https://kwang.life/posts/2015/sgu-104-little-shop-of-flowers/</link>
      <pubDate>Tue, 24 Feb 2015 13:13:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-104-little-shop-of-flowers/</guid>
      <description>Description You want to arrange the window of your flower shop in a most pleasant way. You have $F$ bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through $V$, where $V$ is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase $V$ is the rightmost vase.</description>
    </item>
    
    <item>
      <title>SGU 101 - Domino</title>
      <link>https://kwang.life/posts/2015/sgu-101-domino/</link>
      <pubDate>Sun, 22 Feb 2015 13:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-101-domino/</guid>
      <description>Description Dominoes – game played with small, rectangular blocks of wood or other material, each identified by a number of dots, or pips, on its face. The blocks usually are called bones, dominoes, or pieces and sometimes men, stones, or even cards.
The face of each piece is divided, by a line or ridge, into two squares, each of which is marked as would be a pair of dice&amp;hellip;
The principle in nearly all modern dominoes games is to match one end of a piece to another that is identically or reciprocally numbered.</description>
    </item>
    
    <item>
      <title>SGU 347 - Join the Strings</title>
      <link>https://kwang.life/posts/2015/sgu-347-join-the-strings/</link>
      <pubDate>Sun, 22 Feb 2015 13:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-347-join-the-strings/</guid>
      <description>Description His Royal Highness King of Berland Berl XV was a very wise man and had a very accomplished wife, who was aware of the fact, that prominent and outstanding personalities once having written down their names on the pages of glorious History, remain there forever. His Royal Highness King Berl XV experienced an intrinsic, lost nowadays, deep and sincere sense of respect and trust for his beloved spouse. So he decided to acquire a chronicler of his own.</description>
    </item>
    
    <item>
      <title>SGU 151 - Construct a triangle</title>
      <link>https://kwang.life/posts/2015/sgu-151-construct-a-triangle/</link>
      <pubDate>Sun, 22 Feb 2015 12:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-151-construct-a-triangle/</guid>
      <description>Description Find coordinates of any $\triangle ABC$ if it is know that $|AB|=c$, $|AC|=b$, $|AM|=m$, $AM$ is a median of triangle.
Input There are three real numbers in input: $c$, $b$, $m$ ($0&amp;lt;c, b, m\leq 10^3$) separated by a space. Length of the fractional part of each number is not greater than 2 digits.
Output If solution exists, write three lines. Write coordinates of point $A$ to first line, coordinates of $B$ to second line and coordinates of $C$ to third line.</description>
    </item>
    
    <item>
      <title>SGU 180 - Inversions</title>
      <link>https://kwang.life/posts/2015/sgu-180-inversions/</link>
      <pubDate>Tue, 17 Feb 2015 11:58:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-180-inversions/</guid>
      <description>Description There are $N$ integers ($1\leq N\leq 65537$) $A_1, A_2,\cdots, A_N$ ($0\leq A_i\leq 10^9$). You need to find amount of such pairs $(i, j)$ that $1\leq i &amp;lt; j\leq N$ and $A[i]&amp;gt;A[j]$.
Input The first line of the input contains the number $N$. The second line contains $N$ numbers $A_1,\cdots,A_N$.
Output Write amount of such pairs.
Sample Input 5 2 3 1 5 4 Sample Output 3 Analysis 逆序数。树状数组即可。每次更新 $A[i]$ 为 1，然后所有的逆序数就是 $$A[i] - \sum{\left(A[i] - 1\right)} + 1$$ 更新的同时获取答案。</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 07</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-07/</link>
      <pubDate>Tue, 17 Feb 2015 11:37:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-07/</guid>
      <description>断断续续终于刷完了计算几何专题，感觉太麻烦，小错误不断，尤其是精度问题。还有输出问题，有时候 printf 比 cout 要方便。
UVaOJ 10250 给出正方形的一组对角坐标，求另外两个坐标，用三角函数推到公式。
不妨设两点为 $A(x_1, y_1)$ 和 $C(x_2, y_2)$，则中点为 $G\left(\frac{x_1 + x_2}{2}, \frac{y_1 + y_2}{2}\right)$，对角线长度为 $L = \sqrt{(x_1 - x_2)^2 - (y_1 - y_2)^2}$。
设直线 $AC$ 与 $x$ 轴的夹角为 $\alpha$，则 $$\sin\alpha = \frac{y_2 - y_1}{L},\quad \cos\alpha = \frac{x_2 - x_1}{L}$$
则另外两个坐标分别为 $$B\left(G_x - \frac{1}{2}\cdot L \cdot \sin, G_y + \frac{1}{2}\cdot L \cdot \cos\alpha\right),\quad D\left(G_x + \frac{1}{2}\cdot L \cdot \sin\alpha, G_y - \frac{1}{2}\cdot L \cdot \cos\alpha\right)$$</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 06</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-06/</link>
      <pubDate>Fri, 13 Feb 2015 12:50:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-06/</guid>
      <description>这一次主要是数论专题，感到思维量比上一次的数学题要多多了。同样的问题也是英文题看起来有些吃力。
UVaOJ 575 这应该算不上是一个数论题，它重新定义了一种进制转换的公式，然后根据公式计算即可。
#include &amp;lt;iostream&amp;gt; using namespace std; int Pow(int x, int y); int main() { string x; while(cin &amp;gt;&amp;gt; x) { if(x == &amp;#34;0&amp;#34;) { break; } int ans = 0; for(int i = 0; i &amp;lt; x.length(); i++) { ans += (x[i] - &amp;#39;0&amp;#39;) * (Pow(2, x.length() - i) - 1); } cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; } return 0; } int Pow(int x, int y) { int ret = 1; for(int i = 1; i &amp;lt;= y; i++) { ret *= x; } return ret; } UVaOJ 10110 这是一道典型的数论题，最后亮着的灯，它的开关一定被拨动了奇数次。所以，我们只要看它的因数个数的奇偶性。</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 05</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-05/</link>
      <pubDate>Thu, 12 Feb 2015 14:24:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-05/</guid>
      <description>刷完了数学专题，感觉思维量有些大，同时也对浮点数的运算有些接触。最重要的还是感觉有时候题目读起来有些吃力，需要借助中文翻译。
UVaOJ 113 这道题目是集训的时候第一天晚上的题目，据说可以 double 解决，当时没有 AC。
现在重新做了一遍，需要注意的是最后输出的结果一定要转换成int，否则会 WA。
同时，double 转换为 int 的时候可以采取这样的方式：(int)floor(x + 0.5)。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;math.h&amp;gt; using namespace std; int main() { double x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { cout &amp;lt;&amp;lt; (int)floor(pow(y, 1 / x) + 0.5) &amp;lt;&amp;lt; endl; } return 0; } UVaOJ 10161 这道题目是通常的找规律题目，和一道《Cantor 的数表》是差不多的，需要注意奇偶不同的处理。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;math.h&amp;gt; using namespace std; int main() { int N; while(cin &amp;gt;&amp;gt; N) { if(N == 0) { break; } int k = ceil(sqrt(N)); int s = (k - 1) * (k - 1); int d = N - s; int x, y; if(d &amp;lt;= k) { x = d; y = k; } else { x = k; y = 2 * k - d; } if(k &amp;amp; 1) { swap(x, y); } cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; endl; } return 0; } UVaOJ 253 这道题目如果直接考虑会非常的麻烦，我们可以考虑“颜色对”这样一个概念。</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 04</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-04/</link>
      <pubDate>Wed, 11 Feb 2015 17:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-04/</guid>
      <description>断断续续的把排序和检索专题刷完了，感觉英语还是不够，题目太长以后看起来就会很吃力。
还有一点感触就是 STL 的广泛应用。学到了很多新东西。
当然，不能忍受的就是答案最后多输出一行空行，UVaOJ 会判 WA。
UVaOJ 340 简单模拟题，一开始没有看懂题目。百度以后才明白的题意。朴素模拟以后即可得到答案。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 1024; int pCode[MAX], pGuess[MAX], pVisited[MAX]; int main() { int N, nCase = 0; while(cin &amp;gt;&amp;gt; N) { if(N == 0) { break; } memset(pCode, 0, sizeof(pCode)); for(int i = 1; i &amp;lt;= N; i++) { cin &amp;gt;&amp;gt; pCode[i]; } cout &amp;lt;&amp;lt; &amp;#34;Game &amp;#34; &amp;lt;&amp;lt; ++nCase &amp;lt;&amp;lt; &amp;#34;:&amp;#34; &amp;lt;&amp;lt; endl; while(1) { int x = 0, y = 0, nCnt = 0; memset(pGuess, 0, sizeof(pGuess)); memset(pVisited, 0, sizeof(pVisited)); for(int i = 1; i &amp;lt;= N; i++) { cin &amp;gt;&amp;gt; pGuess[i]; if(pGuess[i] == 0) { nCnt++; } } if(nCnt == N) { break; } for(int i = 1; i &amp;lt;= N; i++) { if(pCode[i] == pGuess[i]) { x++; pVisited[i] = 2; } } for(int i = 1; i &amp;lt;= N; i++) { if(pVisited[i] == 2) { continue; } for(int j = 1; j &amp;lt;= N; j++) { if(pVisited[j] !</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 03</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-03/</link>
      <pubDate>Sun, 08 Feb 2015 14:02:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-03/</guid>
      <description>今天刷了高精度专题，本来准备写一个高精度类，然后直接套模版，后来发现根据每题的要求分开写高精度反而效率高。
主要涉及了高精度加法、乘法、除法、取余（其中后两项为高精度和低精度进行运算）。
终于打过一遍高精度除以低精度了，高精度专题也算圆满了。
UVaOJ 424 高精度加法，水题。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 10240; int nLen; int pData[MAX]; int main() { nLen = 1; memset(pData, 0, sizeof(pData)); string x; while(cin &amp;gt;&amp;gt; x) { if(x != &amp;#34;0&amp;#34;) { while(x[0] == &amp;#39;0&amp;#39;) { x = x.substr(1, x.length() - 1); } nLen = max(nLen, (int)x.length()); for(int i = 1; i &amp;lt;= x.length(); i++) { pData[i] += x[x.length() - i] - &amp;#39;0&amp;#39;; pData[i + 1] += pData[i] / 10; pData[i] %= 10; } while(pData[nLen + 1]) { nLen++; } } else { for(int i = nLen; i &amp;gt;= 1; i--) { cout &amp;lt;&amp;lt; pData[i]; } cout &amp;lt;&amp;lt; endl; nLen = 1; memset(pData, 0, sizeof(pData)); } } return 0; } UVaOJ 10106 高精度乘法，要注意的是某一个乘数为 0 的情况，要特判一下。</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 02</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-02/</link>
      <pubDate>Sat, 07 Feb 2015 19:29:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-02/</guid>
      <description>今天刷了小白书的字符串专题，各种 WA 以及 PE。UVaOJ 中有时候会把 PE 判成 WA，这样会导致很难查错。
UVa 401 这道题目有个坑，只有表格中列出的才是镜像字母，没有列出了的表示没有镜像字母，在这上 WA 了一次。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; using namespace std; const char pAlphabet[] = { &amp;#39;A&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;J&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;*&amp;#39; }; bool Palindrome(string x); bool Mirrored(string x); int main() { string x; while(cin &amp;gt;&amp;gt; x) { if(!</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 01</title>
      <link>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-01/</link>
      <pubDate>Fri, 06 Feb 2015 17:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-01/</guid>
      <description>这一系列的练习主要在 Virtual Judge 上进行，题目为小白书上的题目推荐。
UVa 10055 求两方军队人数的差值，直接相减即可。
不过要注意两个数的大小关系。
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { long long x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { if(x &amp;gt; y) { swap(x, y); } cout &amp;lt;&amp;lt; y - x &amp;lt;&amp;lt; endl; } return 0; } UVa 10071 简单物理题，求两倍时间内匀速运动的路程。即 $s = 2vt$。
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { int x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { cout &amp;lt;&amp;lt; x * y * 2 &amp;lt;&amp;lt; endl; } return 0; } UVa 10300 根据题目描述推导公式，$$ \mathrm{ans} = \sum{\left(\frac{x}{y}\cdot y\cdot z\right)} = \sum{xz}$$</description>
    </item>
    
    <item>
      <title>SGU 127 - Telephone directory</title>
      <link>https://kwang.life/posts/2015/sgu-127-telephone-directory/</link>
      <pubDate>Thu, 05 Feb 2015 21:30:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-127-telephone-directory/</guid>
      <description>Description CIA has decided to create a special telephone directory for its agents. The first 2 pages of the directory contain the name of the directory and instructions for agents, telephone number records begin on the third page. Each record takes exactly one line and consists of 2 parts: the phone number and the location of the phone. The phone number is 4 digits long. Phone numbers cannot start with digits 0 and 8.</description>
    </item>
    
    <item>
      <title>SGU 112 - a^b - b^a</title>
      <link>https://kwang.life/posts/2015/sgu-112-ab-ba/</link>
      <pubDate>Thu, 05 Feb 2015 14:52:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-112-ab-ba/</guid>
      <description>Description You are given natural numbers $a$ and $b$. Find $a^b - b^a$.
Input Input contains numbers $a$ and $b$ ($1\leq a,b\leq 100$).
Output Write answer to output.
Sample Input 2 3 Sample Output -1 Analysis 非常明显的高精度，再观察一下样例，要处理减法，而且有负数，注意一下好了。
Solution #include &amp;lt;iostream&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 1024; const int HEX = 10000; const int BIT = 4; class Huge { public: Huge(); Huge(int x); ~Huge(); public: Huge&amp;amp; operator *= (int x); Huge&amp;amp; operator - (Huge &amp;amp;x); bool operator &amp;gt; (Huge x); public: friend ostream&amp;amp; operator &amp;lt;&amp;lt; (ostream &amp;amp;out, Huge &amp;amp;x); public: int m_pData[MAX]; int m_nLen; }; Huge::Huge() { memset(m_pData, 0, sizeof(m_pData)); m_nLen = 1; } Huge::Huge(int x) { memset(m_pData, 0, sizeof(m_pData)); m_pData[1] = x; m_nLen = 1; } Huge::~Huge() { } bool Huge::operator &amp;gt; (Huge x) { if(this-&amp;gt;m_nLen !</description>
    </item>
    
    <item>
      <title>SGU 113 - Nearly prime numbers</title>
      <link>https://kwang.life/posts/2015/sgu-113-nearly-prime-numbers/</link>
      <pubDate>Thu, 05 Feb 2015 14:46:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-113-nearly-prime-numbers/</guid>
      <description>Description Nearly prime number is an integer positive number for which it is possible to find such primes $P_1$ and $P_2$ that given number is equal to $P_1\cdot P_2$. There is given a sequence on $N$ integer positive numbers, you are to write a program that prints &amp;ldquo;Yes&amp;rdquo; if given number is nearly prime and &amp;ldquo;No&amp;rdquo; otherwise.
Input Input file consists of $N + 1$ numbers. First is positive integer $N$ ($1\leq N\leq 10$).</description>
    </item>
    
    <item>
      <title>SGU 107 - 987654321 problem</title>
      <link>https://kwang.life/posts/2015/sgu-107-987654321-problem/</link>
      <pubDate>Thu, 05 Feb 2015 14:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-107-987654321-problem/</guid>
      <description>Description For given number $N$ you must output amount of $N$-digit numbers, such, that last digits of their square is equal to 987654321.
Input Input contains integer number $N$ ($1\leq N\leq 10^6$).
Output Write answer in output file.
Sample Input 8 Sample Output 0 Analysis 在一定意义上，这也是一道数学题。
由于一个数平方的后X位，只与这个数字的后X位有关系，所以我们不妨使用下面的程序打一个表来看一下。
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { // sqrt(987654321) &amp;gt; 30000 for(long long i = 30000; i &amp;lt;= 999999999; i++) { long long x = i * i; if(x % 1000000000 == 987654321) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } } return 0; } 打完表以后，我们发现只有 8 个数字满足条件，而且分布在 100,000,000 到 999,999,999 之间。</description>
    </item>
    
    <item>
      <title>SGU 184 - Patties</title>
      <link>https://kwang.life/posts/2015/sgu-184-patties/</link>
      <pubDate>Fri, 30 Jan 2015 17:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-184-patties/</guid>
      <description>Description Petya is well-known with his famous cabbage patties. Petya&amp;rsquo;s birthday will come very soon, and he wants to invite as many guests as possible. But the boy wants everybody to try his specialty of the house. That&amp;rsquo;s why he needs to know the number of the patties he can cook using the stocked ingredients. Petya has $P$ grams of flour, $M$ milliliters of milk and $C$ grams of cabbage. He has plenty of other ingredients.</description>
    </item>
    
    <item>
      <title>SGU 135 - Drawing Lines</title>
      <link>https://kwang.life/posts/2015/sgu-135-drawing-lines/</link>
      <pubDate>Thu, 29 Jan 2015 21:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-135-drawing-lines/</guid>
      <description>Description Little Johnny likes to draw a lot. A few days ago he painted lots of straight lines on his sheet of paper. Then he counted in how many zones the sheet of paper was split by these lines. He noticed that this number is not always the same. For instance, if he draws 2 lines, the sheet of paper could be split into 4, 3 or even 2 (if the lines are identical) zones.</description>
    </item>
    
    <item>
      <title>SGU 115 - Calendar</title>
      <link>https://kwang.life/posts/2015/sgu-115-calendar/</link>
      <pubDate>Thu, 29 Jan 2015 21:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-115-calendar/</guid>
      <description>Description First year of new millenium is gone away. In commemoration of it write a program that finds the name of the day of the week for any date in 2001.
Input Input is a line with two positive integer numbers $N$ and $M$, where $N$ is a day number in month $M$. $N$ and $M$ is not more than 100.
Output Write current number of the day of the week for given date (Monday – number 1, … , Sunday – number 7) or phrase &amp;ldquo;Impossible&amp;rdquo; if such date does not exist.</description>
    </item>
    
    <item>
      <title>SGU 123 - The Sum</title>
      <link>https://kwang.life/posts/2015/sgu-123-the-sum/</link>
      <pubDate>Thu, 29 Jan 2015 21:03:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-123-the-sum/</guid>
      <description>Description The Fibonacci sequence of numbers is known: $F_1 = 1$; $F_2 = 1$; $F_{n+1} = F_n + F_{n-1}$, for $n&amp;gt;1$. You have to find $S$ - the sum of the first $K$ Fibonacci numbers.
Input First line contains natural number $K$ ($0&amp;lt;K&amp;lt;41$).
Output First line should contain number $S$.
Sample Input 5 Sample Output 12 Analysis 考虑到数据范围，这道题目只要模拟一下就行了。但是我还是比较喜欢使用数学方法来求解。
令 $S_n$ 表示斐波那契数列的前 $N$ 项和，那么我们很容易求得 $S_n = F_{n+2} - 1$。
Solution #include &amp;lt;iostream&amp;gt; using namespace std; const int MAX = 64; int f[MAX]; int main() { int N; cin &amp;gt;&amp;gt; N; f[1] = f[2] = 1; for(int i = 3; i &amp;lt;= N + 2; i++) { f[i] = f[i - 1] + f[i - 2]; } cout &amp;lt;&amp;lt; f[N + 2] - 1 &amp;lt;&amp;lt; endl; return 0; } 这道题目应该是非常简单的。当然，如果你不知道斐波那契数列可以在$O(n)$时间内求得，那么这道题目对于你来说还是有一定难度的。</description>
    </item>
    
    <item>
      <title>SGU 105 - Div 3</title>
      <link>https://kwang.life/posts/2015/sgu-105-div-3/</link>
      <pubDate>Thu, 29 Jan 2015 20:48:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-105-div-3/</guid>
      <description>Description There is sequence 1, 12, 123, 1234, &amp;hellip;, 12345678910, &amp;hellip; . Given first $N$ elements of that sequence. You must determine amount of numbers in it that are divisible by 3.
Input Input contains $N$ ($1\leq N\leq 2^{31} - 1$).
Output Write answer in output file.
Sample Input 4 Sample Output 2 Analysis 由于一个数对 $3$ 取模恒等于这个数各个位上数字之和对 $3$ 取模。因此，非常容易想到的方法是找规律：
项数 $N$ 数列 除以 $3$ 的余数 答案 $ans$ 1 1 1 0 2 12 0 1 3 123 0 2 4 1234 1 2 5 12345 0 3 6 123456 0 4 7 1234567 1 4 8 12345678 0 5 9 123456789 0 6 由上述表格，我们可以大致的看出规律，即：$$\mathrm{ans} = \begin{cases} \mathrm{ans}, &amp;amp; N \mod 3 = 1\\ \mathrm{ans} + 1, &amp;amp; N \mod 3 = 0, 2\end{cases}$$</description>
    </item>
    
    <item>
      <title>SGU 102 - Coprimes</title>
      <link>https://kwang.life/posts/2015/sgu-102-coprimes/</link>
      <pubDate>Thu, 29 Jan 2015 20:17:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-102-coprimes/</guid>
      <description>Description For given integer $N$ ($1\leq N\leq 10^4$) find amount of positive numbers not greater than $N$ that coprime with $N$. Let us call two positive integers (say, $A$ and $B$, for example) coprime if (and only if) their greatest common divisor is 1. (i.e. $A$ and $B$ are coprime iff $\mathrm{gcd}\left(A,B\right) = 1$).
Input Input file contains integer $N$.
Output Write answer in output file.
Sample Input 9 Sample Output 6 Analysis 我首先想到的是欧拉函数 $\varphi\left(N\right)$，后来发现数据量并不是特别的大，所以又用暴力做了一遍，也 AC 了。</description>
    </item>
    
    <item>
      <title>SGU 100 - A &#43; B</title>
      <link>https://kwang.life/posts/2015/sgu-100-a-&#43;-b/</link>
      <pubDate>Thu, 29 Jan 2015 20:08:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2015/sgu-100-a-&#43;-b/</guid>
      <description>[100. A+B]
Description Read integers $A$ and $B$ from input file and write their sum in output file.
Input Input file contains $A$ and $B$ ($0&amp;lt;A,B&amp;lt;10001$).
Output Write answer in output file.
Sample Input 5 3 Sample Output 8 Analysis 水题。
Solution #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int a, b; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl; return 0; } 到了大学，开始接触 ACM。高中里参加了 3 年 NOIP，拿了两年的二等奖，现在终于接触到了 ACM，找到了 SGU 这个 OJ 开始刷题。</description>
    </item>
    
    <item>
      <title>Codeforces 1B - Spreadsheet</title>
      <link>https://kwang.life/posts/2014/codeforces-1b-spreadsheet/</link>
      <pubDate>Sun, 20 Jul 2014 10:08:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2014/codeforces-1b-spreadsheet/</guid>
      <description>1B Spreadsheet
Analysis The essence of this problem lays in the conversion between decimal (&amp;lsquo;0&amp;rsquo;-&amp;lsquo;9&amp;rsquo;) and base 26 (&amp;lsquo;A&amp;rsquo;-&amp;lsquo;Z&amp;rsquo;).
Notice: There is no number in the base 26 system that function as the number &amp;lsquo;0&amp;rsquo; in the decimal system, so when the decimal number is a multiple of 26, a special handle is needed.
if(C % 26 == 0) { strTmp = &#39;Z&#39; + strTmp; C /= 26; C--; continue; }</description>
    </item>
    
    <item>
      <title>Codeforces 1A - Theatre Square</title>
      <link>https://kwang.life/posts/2014/codeforces-1a-theatre-square/</link>
      <pubDate>Sun, 20 Jul 2014 09:58:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2014/codeforces-1a-theatre-square/</guid>
      <description>1A Theatre Square
Analysis Calculate the number of flagstones used to cover the length and width, then multiply them to get the correct answer.
Notice: Pay attention to the data range. Use unsigned long long.
Solution #include &amp;lt;iostream&amp;gt; using namespace std; int main() { unsigned long long n, m, a, ans = 0; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; a; if(n % a == 0) { n /= a; } else { n = n / a + 1; } if(m % a == 0) { m /= a; } else { m = m / a + 1; } cout &amp;lt;&amp;lt; n * m &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
  </channel>
</rss>
