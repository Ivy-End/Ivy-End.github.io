<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>大学生活 on 退思轩</title>
    <link>https://kwang.life/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/</link>
    <description>Recent content in 大学生活 on 退思轩</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 31 Dec 2018 11:25:00 +0800</lastBuildDate><atom:link href="https://kwang.life/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>戊戌志（2018 年度总结）</title>
      <link>https://kwang.life/2018/12/%E6%88%8A%E6%88%8C%E5%BF%972018-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 31 Dec 2018 11:25:00 +0800</pubDate>
      
      <guid>https://kwang.life/2018/12/%E6%88%8A%E6%88%8C%E5%BF%972018-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>树枝在风儿的吹奏下，飘出了一串美妙的音符；雪花在大地的构思下，描绘了一幅绝佳的画作。临窗眺望的我不觉看得出神，恍惚间，一年来的点点滴滴仿佛就在眼前。 这一年，我找寻到了那个相识、相知、相爱、相守的人。不论是静谧的校园漫步、沉浸的电影欣赏、醉人的美味品鉴；还是热闹的厨房烹饪、愉快的景点探索、完美的手工配合……处处都留下了我们的欢声笑语。你的出现，让我领略了爱与被爱的美好，也让我的生命变得完整。 这一年，我经历了从本科到研究生的转变。这可以说是一个较大的转折，也让我产生了很多思考。 春，我开始了本科毕业论</description>
    </item>
    
    <item>
      <title>本科毕业论文致谢</title>
      <link>https://kwang.life/2018/12/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E8%87%B4%E8%B0%A2/</link>
      <pubDate>Sun, 30 Dec 2018 22:13:00 +0800</pubDate>
      
      <guid>https://kwang.life/2018/12/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%E8%87%B4%E8%B0%A2/</guid>
      <description>此乃余首篇文言，因查重，今日乃详。 时维四月，序属清夏，余负笈姑苏三载有余矣。感韶光之易逝兮，恐年岁之不吾与。懵懵间已逾弱冠之年，惶惶兮尚无功名傍身。值此掩卷遐思之际，忆往昔峥嵘岁月，不禁悲喜交集。凯，三尺微命，一介书生，得助四方，略有小成，感念之情，列叙如下。 今天下学子皆得安其学而亲其师，乐其友而信其道，皆因无内外忧患之扰。寻其根，实乃中共领导之功。此吾拜谢者一也。 吾本草芥寒门，今日所成，皆赖椿萱。家严襟怀洒落，博闻强识，昔日趋庭，叨陪鲤对；家慈温良恭俭，教余以严。虽结草衔环，无以报之万一。此吾</description>
    </item>
    
    <item>
      <title>恰同学少年</title>
      <link>https://kwang.life/2018/02/%E6%81%B0%E5%90%8C%E5%AD%A6%E5%B0%91%E5%B9%B4/</link>
      <pubDate>Fri, 02 Feb 2018 20:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/2018/02/%E6%81%B0%E5%90%8C%E5%AD%A6%E5%B0%91%E5%B9%B4/</guid>
      <description>今阅前文，偶见于丁酉六月应《院刊》约稿所著之文。读毕愈觉其实为吾大学向之三秋一概述，现列叙如下。 依稀记得三年前刚刚步入大学时的懵懂无知，如今却已成大四，凝眸回望来时的道路，曾经留下的足迹亦如沙滩上的脚印，在潮涨潮落中渐渐模糊不清。 那是在姑苏的第一个秋天，人行道上金黄的落叶在夕阳下显得别有一番景致。当时的我第一次与当年苏州大学 ACM-ICPC 集训队队长在咖啡厅内相遇，却不曾料到此后一年多的时间内，我会全身心的投入到 ACM-ICPC 集训队的训练之中。 那无数个在实验室的日日日夜夜，让我体会到了较高三更为枯燥的生活，却也带给了我许</description>
    </item>
    
    <item>
      <title>丁酉志（2017 年度总结）</title>
      <link>https://kwang.life/2017/12/%E4%B8%81%E9%85%89%E5%BF%972017-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 31 Dec 2017 23:13:00 +0800</pubDate>
      
      <guid>https://kwang.life/2017/12/%E4%B8%81%E9%85%89%E5%BF%972017-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>呼吸着芬芳的空气，欣赏着眼前静谧的冬景，午后的我漫无目的行走在姑苏城的小巷之中，猛然发现丁酉年已匆匆走过，慌乱之中，赶忙打开尘封已久的博客，准备好好总结一下这一年的经历，就叫它《丁酉志》吧。 翻阅着一年的照片，过去的一幕幕仿佛又浮现在了眼前，这一年做了很多事情，也做了许多决定，到目前为止，也很难说孰是孰非，且听我慢慢道来。 隆冬时节，在曲老师的指导下，应苏州市第三中学的要求，帮对方制作了“基于重锤地倾的地震信号检测系统”，前后多次前往苏州市第三中学进行现场调试以及项目需求的沟通协商，面对甲方时不时冒</description>
    </item>
    
    <item>
      <title>何为江湖？</title>
      <link>https://kwang.life/2017/11/%E4%BD%95%E4%B8%BA%E6%B1%9F%E6%B9%96/</link>
      <pubDate>Fri, 10 Nov 2017 13:44:00 +0800</pubDate>
      
      <guid>https://kwang.life/2017/11/%E4%BD%95%E4%B8%BA%E6%B1%9F%E6%B9%96/</guid>
      <description>最近整理旧时的读书笔记，偶然间看到 2016 年 3 月写的一篇文章，读完之后感觉非常契合此时心境，遂将其发布出来。 适逢金庸 92 岁大寿，写下这篇文章，聊表敬畏之心。 我记得接触的第一本武侠小说，便是射雕三部曲之一的《射雕英雄传》，当时的我少不更事，无法理解东邪身上的邪气，也理解不了南帝为何遁入空门，更不明白西毒如此作恶多端，只是敬佩七公的行侠仗义，同时也笑郭靖的傻里傻气。以为所谓江湖，就是刀光剑影，向往着自己武功盖世，全下无敌。 接下来接触到的便是《神雕侠侣》，不理解杨过年少的苦，自然也不明白他成年后待人接物的姿态</description>
    </item>
    
    <item>
      <title>福尔摩沙游学有感</title>
      <link>https://kwang.life/2017/08/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%B2%99%E6%B8%B8%E5%AD%A6%E6%9C%89%E6%84%9F/</link>
      <pubDate>Thu, 24 Aug 2017 23:31:00 +0800</pubDate>
      
      <guid>https://kwang.life/2017/08/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%B2%99%E6%B8%B8%E5%AD%A6%E6%9C%89%E6%84%9F/</guid>
      <description>五百多年前，葡萄牙人在大航海的过程中发现了台湾这个美丽的岛屿，将其命名为“Formosa”（福尔摩沙）。此次有幸在台湾停留多日，领略了与姑苏不一样的风情。而今游学之旅已近尾声，便将此行所见所感记录下来。 搭乘了延误的航班、坐了接机的大巴，风尘仆仆地赶到国立清华大学，迎接我们的是连绵的细雨和位居山顶的宿舍。在校外奔波了一个晚上，终于采购完了各类生活用品，做好了迎接不一样的暑期生活的准备。 在来之前，对于研究生的方向做了很多规划，最后锁定在了集成电路设计、机器学习这两个方向，但一直犹豫不决。由于在大陆接</description>
    </item>
    
    <item>
      <title>丙申志（2016 年度总结）</title>
      <link>https://kwang.life/2016/12/%E4%B8%99%E7%94%B3%E5%BF%972016-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 31 Dec 2016 19:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/2016/12/%E4%B8%99%E7%94%B3%E5%BF%972016-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>一直想写年终总结，却总是忙于应付各种事务，导致一拖再拖。适逢今天立春之际，写下这篇文章，权当是对过去一年的反思与总结。 时间真是个猝不及防的东西，不知不觉中高中时创建的这个博客已经在巨大的互联网世界中立足四年了，而我也已经从当时特别无知的高中生变成了如今比较无知的大学生了，年龄总是一年一年的增加，但是真正的智慧却不会随着时间线性的增长，总是需要及时的去反思总结并且在实践中进行运用才能真正的内化成智慧。 如果说 2015 年的关键词是“比赛”，那么 2016 年的关键词一定是“项目”。虽然许多人习惯在“项目”前面加上“科</description>
    </item>
    
    <item>
      <title>再见了，ACM-ICPC</title>
      <link>https://kwang.life/2016/04/%E5%86%8D%E8%A7%81%E4%BA%86acm-icpc/</link>
      <pubDate>Tue, 05 Apr 2016 22:40:00 +0800</pubDate>
      
      <guid>https://kwang.life/2016/04/%E5%86%8D%E8%A7%81%E4%BA%86acm-icpc/</guid>
      <description>终于还是来到了这一天，当双手在键盘上敲下这些文字的时候，竟有些颤抖。尽管曾经不止一次的思考过退役后的场景，也做足了充分的思想准备，但当这一刻真的到来，却有些不知所措。看着 ACM 交流群里热烈的讨论，关上窗口，退出该群；将 ACM 资料小心翼翼的放置在移动硬盘的角落，不小心瞥见 NOIP 退役时存放的资料，记忆一下子席卷而来。在算法竞赛的道路上跌跌撞撞的行走了将近五年，从 NOIP 到 ICPC，是时候说再见了。 此时的我，依然记得多年前第一次提交 A+B 时的激动，记得思索半天推导出 Segment Tree 时的满足，记得苦思冥想理解 Dancing Links 时的欣喜，记得写完几本草</description>
    </item>
    
    <item>
      <title>记 2015 ACM-ICPC亚洲区域赛（长春站、北京站）</title>
      <link>https://kwang.life/2015/11/%E8%AE%B0-2015-acm-icpc%E4%BA%9A%E6%B4%B2%E5%8C%BA%E5%9F%9F%E8%B5%9B%E9%95%BF%E6%98%A5%E7%AB%99%E5%8C%97%E4%BA%AC%E7%AB%99/</link>
      <pubDate>Fri, 20 Nov 2015 21:50:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/11/%E8%AE%B0-2015-acm-icpc%E4%BA%9A%E6%B4%B2%E5%8C%BA%E5%9F%9F%E8%B5%9B%E9%95%BF%E6%98%A5%E7%AB%99%E5%8C%97%E4%BA%AC%E7%AB%99/</guid>
      <description>细细想来，已经有近四个月没有更新过博客，上一次还是在 7 月份。既然这样，那就从那时候讲起吧。 整个暑假，绝大部分时间在参加 ACM 训练，除此之外，还参加了全国大学生电子设计竞赛，拿了个一般的奖项；去英国走了一遭，体会了不同的风土人情。一直想好好记录这两件事情，但总是由于各种各样的原因搁置了。 这学期自从开学以来就一直非常的忙，刚开始备战 ACM，上个月在长春拿了一块铜牌，上星期在北京拿了一块银牌，周三刚刚把 FPGA 设计邀请赛的作品完成，明天一大早赶往上海交通大学参加微软 Hackthon 大赛，下周需要提交全国移动互联网开发大赛的作</description>
    </item>
    
    <item>
      <title>SGU 144 - Meeting</title>
      <link>https://kwang.life/2015/07/sgu-144-meeting/</link>
      <pubDate>Wed, 22 Jul 2015 20:46:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/07/sgu-144-meeting/</guid>
      <description>Description Two of the three members of the winning team of one of the ACM regional contests are going to meet in order to train for the upcoming World Finals. They decided that they will meet sometime between $X$ o&amp;rsquo;clock and $Y$ o&amp;rsquo;clock. Because they never get anywhere on time (they were late even on the day of the regional contest), they did not set an exact time when they will meet. However, they decided that the one who gets first at the meeting point will not wait more than $Z$ minutes for the other one (they calculated that, if the other one will not come within $Z$ minutes from the arrival of the first of them, then it is very probable that he will not show up at all). Knowing that, in the end, both of them will show up at some time between $X$ o&amp;rsquo;clock and $Y$ o&amp;rsquo;clock (not necessarily after an integer number of minutes), compute which is the probability that they will actually meet. Input The input will contain 2 integer numbers $X$ and $Y$ ($0\leq X &amp;lt; Y\leq 24$) and one real number $Z$ ($0 &amp;lt; Z\leq 60(Y-X)$). Output You should output the required probability with 7 decimal digits (rounded according to the 8th decimal digit). Sample Input 1 11 12 20.0 Sample Output 1 0.5555556 Analysis 这是一道纯粹的数学概率题，我们可以进行公式推导。首先我们</description>
    </item>
    
    <item>
      <title>The Freshman Grind</title>
      <link>https://kwang.life/2015/07/the-freshman-grind/</link>
      <pubDate>Tue, 21 Jul 2015 09:49:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/07/the-freshman-grind/</guid>
      <description>想来放假已经好几天了，总算抽出了一些时间来总结一下这学期的经历，虽然在期末考试期间应导师要求写过一篇《学期总结》，然而由于复习紧迫，只是草草收笔，并没有点中要处。 Grind of Courses 这学期刚开始，或许是由于上学期不错的成绩造成的盲目自信，导致了上课时间并没有特别认真的听讲，大多数时间在自己看课外书，比如《暗时间》、《浪潮之巅》等（不得不承认，这些都是不可多得的好书，前者介绍了如何高效的利用时间；后者介绍了近几十年信息技术产业作为信息产业的发展史，其中涉及了各大知名公司，例如 Apple、Microsoft、AT</description>
    </item>
    
    <item>
      <title>SGU 116 - Index of super-prime</title>
      <link>https://kwang.life/2015/07/sgu-116-index-of-super-prime/</link>
      <pubDate>Mon, 20 Jul 2015 13:39:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/07/sgu-116-index-of-super-prime/</guid>
      <description>Description Let $P_1, P_2,\cdots ,P_N,\cdots$ be a sequence of prime numbers. Super-prime number is such a prime number that its current number in prime numbers sequence is a prime number too. For example, 3 is a super-prime number, but 7 is not. Index of super-prime for number is 0 iff it is impossible to present it as a sum of few (maybe one) super-prime numbers, and if such presentation exists, index is equal to minimal number of items in such presentation. Your task is to find index of super-prime for given numbers and find optimal presentation as a sum of super-primes. Input There is a positive integer number in input. Number is not more than 10000. Output Write index $I$ for given number as the first number in line. Write I super-primes numbers that are items in optimal presentation for given number. Write these I numbers in order of non-increasing. Sample Input 1 6 Sample Output 1 2 2 3 3 Analysis 首先，我们可以根据筛法求出 10000 以内的素数，接下来我们继续利用筛法，求出这些素数中，下标为素数的超级素数，这样我们就得到了题目中所需要的超级素数。 对于寻找一个最优的组合，我们可以使</description>
    </item>
    
    <item>
      <title>专题一、简单搜索 - Virtual Judge</title>
      <link>https://kwang.life/2015/06/%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2-virtual-judge/</link>
      <pubDate>Mon, 08 Jun 2015 21:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/06/%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2-virtual-judge/</guid>
      <description>很久以前刷完了 Virtual Judge 上的简单搜索专题，现总结如下： POJ 1321 由于题目的数据范围比较小，可以直接 dfs 暴力。读入时记录每个空位的位置，保存在 pX[] 以及 pY[] 数组中。暴力的时候统计当前处理第几个空格以及当前处理到了第几行即可。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include &amp;lt;iostream&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 128; long long ans; int N, K, nCnt; bool pUsed[MAX]; int pX[MAX], pY[MAX]; int pRow[MAX], pCol[MAX]; void dfs(int x, int y); int main() { char dwTmp; while(cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K) { if(N == -1 &amp;amp;&amp;amp; K == -1) { break; } nCnt = 0; ans = 0; for(int i = 1; i &amp;lt;= N; i++) { for(int j = 1; j &amp;lt;= N; j++) { cin &amp;gt;&amp;gt; dwTmp; if(dwTmp == &amp;#39;#&amp;#39;) { nCnt++; pX[nCnt] = i;</description>
    </item>
    
    <item>
      <title>记 2015 ACM-ICPC 上海大都会赛</title>
      <link>https://kwang.life/2015/05/%E8%AE%B0-2015-acm-icpc-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/</link>
      <pubDate>Sat, 30 May 2015 09:46:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/%E8%AE%B0-2015-acm-icpc-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/</guid>
      <description>到今天为止，距离 2015 ACM 国际大学生程序设计竞赛上海大都会赛结束已经快有一个星期了，趁着记忆中暂存的些许余温，将其记录下来。 我们从上周四开始，放下手中正在做的题目，转而准备比赛所需要的材料。由于比赛是可以携带纸质材料进场，因此我们准备了一些较为常用的算法模板，并且幻想着可能会遇到类似的题目。然而事实证明，携带的这些模板并没有什么作用，当然，这是后话。 周五晚上，我们开始整理行装。由于第二天早上需要六点半之前集合，所以便早早的入睡了。早上起来稍微打点一下，已是六点。草草地吃了一块面包，关上宿舍门便出发了。</description>
    </item>
    
    <item>
      <title>2048 游戏制作过程（Java 描述）：第五节、界面美化</title>
      <link>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%94%E8%8A%82%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Sun, 17 May 2015 11:07:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%94%E8%8A%82%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</guid>
      <description>这一节，我们将介绍游戏界面的美化以及游戏数据的存储。 首先创建一个 color.xml 资源文件，用来保存每个数字对应的背景色和前景色。右击 res 文件夹，选择 New，单击 Android resource file，输入 color，单击 Next 即可。 新建资源 修改代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;color name=&amp;#34;bg2&amp;#34;&amp;gt;#eee4da&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text2&amp;#34;&amp;gt;#776e65&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg4&amp;#34;&amp;gt;#ede0c8&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text4&amp;#34;&amp;gt;#776e65&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg8&amp;#34;&amp;gt;#f2b179&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text8&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg16&amp;#34;&amp;gt;#f59563&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text16&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg32&amp;#34;&amp;gt;#f67c5f&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text32&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg64&amp;#34;&amp;gt;#f65e3b&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text64&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg128&amp;#34;&amp;gt;#edcf72&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text128&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg256&amp;#34;&amp;gt;#edcc61&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text256&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg512&amp;#34;&amp;gt;#edc850&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text512&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg1024&amp;#34;&amp;gt;#edc53f&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text1024&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bg2048&amp;#34;&amp;gt;#edc22e&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;text2048&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;bgsuper&amp;#34;&amp;gt;#3c3a32&amp;lt;/color&amp;gt; &amp;lt;color name=&amp;#34;textsuper&amp;#34;&amp;gt;#f9f6f2&amp;lt;/color&amp;gt; &amp;lt;/resources&amp;gt; 其中 bg 表示背景色，text 表示前景色，切换到 Card 界面，在 setNumber 中添加如下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>2048 游戏制作过程（Java 描述）：第三节、创建界面</title>
      <link>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%89%E8%8A%82%E5%88%9B%E5%BB%BA%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Thu, 14 May 2015 20:03:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%89%E8%8A%82%E5%88%9B%E5%BB%BA%E7%95%8C%E9%9D%A2/</guid>
      <description>首先，我们要使得我们的程序能够判断用户的手势，一共为上、下、左、右四种。在 GameView 类中添加如下代码： 1 2 3 4 5 6 7 8 9 private void initGameView() { setOnTouchListener(new View.OnTouchListener() { @Override public boolean onTouch(View v, MotionEvent event) { return false; } }); } 接下来，我们来分析一下如何进行手势判断。首先，用户的手势输入应该有两个数据，一个是按下的屏幕位置，一个是放开的屏幕位置。那么我们只需要计算横向和竖向坐标差的绝对值，绝对值较大的一个方向则是用户需求的方向。至于横向中的左右和竖向中的上下，我们可以通过按下和放开的位置的大小进行比较得出。 有了上面的分析，我们开始写代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>2048 游戏制作过程（Java 描述）：第二节、基本设置</title>
      <link>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%8C%E8%8A%82%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 14 May 2015 17:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%8C%E8%8A%82%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</guid>
      <description>首先，我们需要修改一下应用的图标。准备一个 png 格式的图标文件。如下图所示： App 图标 接下来，找到上一节中保存项目的位置，依次展开文件夹中的 2048/Game2048/app/src/main/res 目录，如下图所示： App 图标 分别将刚才制作完成的图标文件更改名字为 ic_launcher.png，并且修改尺寸为 144×144、96×96、72×72、48×48，分别放入 drawable-xxhdip、drawable-xhdpi、drawable-hdpi、drawble-mdpi 文件夹覆盖其中的图标文件。需要用到这么多尺寸的图片，是由于 Android 应用程序需要兼容不同的客</description>
    </item>
    
    <item>
      <title>2048 游戏制作过程（Java 描述）：第一节、创建项目</title>
      <link>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%80%E8%8A%82%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 08 May 2015 21:42:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/2048-%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bjava-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%80%E8%8A%82%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid>
      <description>自从关于扫雷游戏制作过程的文章发布后，有同学让我写一些关于移动开发的文章，并且建议以雷电这款游戏为例。然而考虑到该项目对于初学者来说代码量较大，所以暂且不涉及这部分，转而使用较为简单的 2048 游戏作为例子，可能对于初学者来说更容易上手，并且也更容易自己动手实现出来。 本项目已根据文章进度托管在 GitHub 上：2048，读者可以自行查看。 由于没有 Mac，因此只能介绍关于 Android 平台相关的开发知识。然而进行 Android 开发之前，需要搭建 Android 开发环境，这一步比较有难度的，主要是各个软件的配置较为麻烦，使得很多初学者望而却步。目前主流的 IDE</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第八节、整体完善</title>
      <link>https://kwang.life/2015/05/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%85%AB%E8%8A%82%E6%95%B4%E4%BD%93%E5%AE%8C%E5%96%84/</link>
      <pubDate>Sat, 02 May 2015 11:12:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%85%AB%E8%8A%82%E6%95%B4%E4%BD%93%E5%AE%8C%E5%96%84/</guid>
      <description>这一节我们将介绍结束游戏的方法，以及一些整体方面的完善。首先考虑失败的情况，它会将所有的地雷都显示出来。我们新建一个 GameLost 函数： 1 2 3 4 5 6 7 8 9 10 11 12 13 private void GameLost() { for(int i = 1; i&amp;lt;= nWidth; i++) { for(int j = 1; j&amp;lt;= nHeight; j++) { if(pMine[i, j] == -1 &amp;amp;&amp;amp; (pState[i, j] == 0 || pState[i, j] == 3)) // 未点开或者标记为问号的雷 { pState[i, j] = 1; // 点开该地雷 } } } } 在游戏结束的地方调用 GameLost 函数，因为我们上一节中讲述的游戏结束都是失败的情况： 1 2 3 4 5 6 7 8 9 if(nFlagCnt == nSysCnt || nFlagCnt + nDoubtCnt == nSysCnt) // 打开九宫格 { bool bFlag = OpenMine(MouseFocus.X, MouseFocus.Y); if(!bFlag) // 周围有地雷 { // 结束游戏 GameLost(); } } 1 2 3 4 5 6 7 8 9 if(pMine[MouseFocus.X, MouseFocus.Y] != -1 &amp;amp;&amp;amp; pState[MouseFocus.X, MouseFocus.Y] == 0) { dfs(MouseFocus.X, MouseFocus.Y); } else { // 地雷，游戏</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第七节、内部实现（续）</title>
      <link>https://kwang.life/2015/05/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%83%E8%8A%82%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E7%BB%AD/</link>
      <pubDate>Fri, 01 May 2015 22:23:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/05/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%83%E8%8A%82%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E7%BB%AD/</guid>
      <description>这一节我们主要讲解扫雷时鼠标单击的事件。我们首先介绍左键单击的事件，分为两种情况——遇到地雷，游戏结束；不是地雷，自动点开相邻的非地雷区域，并且显示对应地雷区域周围地雷的数目。 我们首先需要为 Form_Main 添加 MouseDown 以及 MouseUp 事件，分别用来监测鼠标按下以及弹起的事件信息。再定义两个全局变量，用来标识鼠标左键以及右键是否被按下，代码如下： 1 2 bool bMouseLeft; // 鼠标左键是否被按下 bool bMouseRight; // 鼠标右键是否被按下 在 MouseDown 事件中输入下面的代码： 1 2 3 4 5 6 7 8 9 10 11 private void Form_Main_MouseDown(object sender, MouseEventArgs e) { if(e.Button == MouseButtons.Left) // 鼠标左键被按下 { bMouseLeft = true; } if(e.Button == MouseButtons.Right) // 鼠标右键被按下 { bMouseRight = true; } } 在 MouseUp</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第六节、内部实现</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%85%AD%E8%8A%82%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 30 Apr 2015 21:26:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%85%AD%E8%8A%82%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>在进行内部实现之前，我们先来考虑一下扫雷的内部逻辑。首先，我们需要保存每个点上是否有地雷，如果没有地雷，那么要显示与它紧邻的八个格子中一共有多少的地雷。还需保存每个雷区的状态（点开，未点开，红旗，问号）。我们考虑定义两个常量，表示地雷的最大范围： 1 2 const int MAX_WIDTH = 64; // 最大宽度 const int MAX_HEIGHT = 32; // 最大高度 接下来定义两个数组，用来保存上述两种数据。对于第一类数据，我们使用 -1 表示该区域有地雷，使用数字表示与它紧邻的八个格子中一共有多少地雷；对于第二类数据，我们使用 0 表示未点开，1 表示点开，2 表示红旗，3 表示问号。如</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第五节、菜单操作（续）</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%94%E8%8A%82%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C%E7%BB%AD/</link>
      <pubDate>Fri, 24 Apr 2015 16:09:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%94%E8%8A%82%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C%E7%BB%AD/</guid>
      <description>上一节中，我们还剩下 Setting 和 Rank 两个菜单项目没有设置事件，是因为它们都涉及到了弹出一个新的窗口。这一节，我们将主要介绍创建窗口的方法，以及窗口之间的数据通信。 首先，我们新建一个窗口，在右侧找到解决方案资源管理器，右击 Minesweeper 项目名，选择添加，如图所示： 菜单示意图 选择新建项，如图所示： 菜单示意图 在弹出的窗口中选择 Windows 窗体，并将名称修改为 Form_Setting.cs，单击确定，如图所示： 新建窗口示意图 将新建的窗口 Icon 属性修改为扫雷的图标，将 MaximizeBox 属性修改为 False，将 Name 属性修改为 Form_Setting，将 BackColor 属性修</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第四节、菜单操作</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%9B%9B%E8%8A%82%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 22 Apr 2015 16:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E5%9B%9B%E8%8A%82%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/</guid>
      <description>我们现在的程序单击菜单的时候不会有任何反应，这一节我们主要介绍菜单的相关代码，使得菜单能够正常使用。 在第二节中，我们曾经提出希望在对应级别（初级、中级、高级、自定义）的按钮的显示勾，以表示目前的游戏等级。我们有两个时候需要对它进行操作，一个是加载上次游戏设置的时候，一个是在游戏过程中进行设置的时候，我们先介绍第一种情况。按照下图修改代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /// &amp;lt;summary&amp;gt; /// 选择对应的游戏等级 /// &amp;lt;/summary&amp;gt; private void SelectLevel() { if (nWidth == 10 &amp;amp;&amp;amp; nHeight == 10 &amp;amp;&amp;amp; nMineCnt == 10) { beginnerBToolStripMenuItem.Checked = true; intermediateIToolStripMenuItem.Checked = false; expertEToolStripMenuItem.Checked = false; settingSToolStripMenuItem.Checked = false; } else if</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第三节、雷区绘制</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%89%E8%8A%82%E9%9B%B7%E5%8C%BA%E7%BB%98%E5%88%B6/</link>
      <pubDate>Tue, 21 Apr 2015 15:42:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%89%E8%8A%82%E9%9B%B7%E5%8C%BA%E7%BB%98%E5%88%B6/</guid>
      <description>这一节我们主要涉及界面中雷区的绘制方法。 首先来考虑几个问题。为了保存整个雷区的信息，我们需要哪些数据。显然，除了要保存雷区的宽度和高度（分别定义为宽和高方向上方块的个数）外，还需要保存地雷的数目。这样我们需要用到三个变量 nWidth, nHeight, nMineCnt 分别保存雷区的宽度、雷区的高度以及地雷的数目。 右击窗口，选择查看代码，也可以使用快捷键 F7，如下图所示： 菜单示意图 可以看到这样的代码界面： 代码界面 添加如下所示的代码，用来定义扫雷区域的基本变量，它们的含义在上文或者注释中都有提及： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace Minesweeper { public partial class Form_Main :</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第二节、界面设计</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%8C%E8%8A%82%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 20 Apr 2015 19:31:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%BA%8C%E8%8A%82%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</guid>
      <description>这一节我们主要介绍关于扫雷游戏界面的设计，此处我们借鉴经典扫雷界面的设计方法，首先需要创建一个菜单栏。具体方法在左边找到工具箱窗口，展开其中的菜单和工具栏，找到 MenuStrip 选项，如图所示： 添加 MenuStrip 只需要双击该条目就可以在窗口中新建一个菜单栏，如图所示： MenuStrip 添加效果 对于这个控件（我们习惯上将窗口中的东西称作为控件），我们还是需要修改它的一些属性，对于个人习惯而言，我习惯于修改它的 Name 属性，这样编程的时候不至于将很多控件混淆。我们将它的 Name 属性修改为“MenuStrip_Main”。单击“请在此键入”，输入“Game</description>
    </item>
    
    <item>
      <title>扫雷游戏制作过程（CSharp 描述）：第一节、创建项目</title>
      <link>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%80%E8%8A%82%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 20 Apr 2015 17:58:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/04/%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8Bcsharp-%E6%8F%8F%E8%BF%B0%E7%AC%AC%E4%B8%80%E8%8A%82%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid>
      <description>这一系列的文章主要受许宏旭的启发而来。他目前在连载更新一篇使用 C# 制作五子棋的教程。选择这一项目的主要原因是 Windows 8.1 系统上的扫雷需要前往应用商店下载，显得有些麻烦。因此想自己制作一个。主要采用 C# 语言进行实现。主要功能与原来的扫雷游戏基本相同，进行修改的地方主要是扫雷区的界面。如有不恰当的地方，还望指正。 该项目现已根据文章进度托管在GitHub上，读者可以自行查看。 玩过扫雷的读者应该知道，扫雷需要用到三种图片素材——地雷、红旗、问号。当右击一个方块的时候，会插上红旗，表示游戏者认为该方块内有地雷；再次右</description>
    </item>
    
    <item>
      <title>动态规划 - HDU</title>
      <link>https://kwang.life/2015/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-hdu/</link>
      <pubDate>Sat, 14 Mar 2015 13:22:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-hdu/</guid>
      <description>HDU 2955 这是一道概率 DP，我第一次的想法是把概率 $P$ 乘以 100，变成一个背包然后做 0/1 背包，后来发现这样做是错误的。 原因：概率应该是相乘，而不是相加。 后来看了题解想到了另外一种方法，使用逃脱概率来计算，用 $f[j]$ 表示偷走 $j$ 价值后逃脱的概率。易知，多次逃脱概率为每次逃脱概率相乘。这里不使用被逮捕的概率是因为被逮捕的情况比较复杂（例如偷第一件物品不被逮捕，偷第二件物品被逮捕，被逮捕的概率应该为头第一件物品不被逮捕的概率乘以偷第二件物品不被逮捕的概率。），而当我们转而考虑它的对立事件——逃脱时，问题就会变得容易了，</description>
    </item>
    
    <item>
      <title>SGU 114 - Telecasting station</title>
      <link>https://kwang.life/2015/03/sgu-114-telecasting-station/</link>
      <pubDate>Sat, 07 Mar 2015 19:37:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-114-telecasting-station/</guid>
      <description>Description Every city in Berland is situated on $Ox$ axis. The government of the country decided to build new telecasting station. After many experiments Berland scientists came to a conclusion that in any city citizens displeasure is equal to product of citizens amount in it by distance between city and TV-station. Find such point on $Ox$ axis for station so that sum of displeasures of all cities is minimal. Input Input begins from line with integer positive number $N$ ($0&amp;lt;N&amp;lt;15000$) – amount of cities in Berland. Following $N$ pairs $(X, P)$ describes cities ($0&amp;lt;X, P&amp;lt;50000$), where $X$ is a coordinate of city and $P$ is an amount of citizens. All numbers separated by whitespace(s). Output Write the best position for TV-station with accuracy $10^{-5}$. Sample Input 1 2 3 4 5 4 1 3 2 1 5 2 6 2 Sample Output 1 3.00000 Analysis 这道题目有几个地方需要注意： 最后精确到 $10^{-5}$ 的要求基本是多余的，只要在结果后面再输出“.00000”； 本题使用了 Special Judge，因此答案可能不唯一。 有了上面两点的认识，我们来考虑一般的解决方案。我们不妨考虑电视台建在</description>
    </item>
    
    <item>
      <title>SGU 222 - Little Rooks</title>
      <link>https://kwang.life/2015/03/sgu-222-little-rooks/</link>
      <pubDate>Sat, 07 Mar 2015 14:26:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-222-little-rooks/</guid>
      <description>Description Inspired by a &amp;ldquo;Little Bishops&amp;rdquo; problem, Petya now wants to solve problem for rooks. A rook is a piece used in the game of chess which is played on a board of square grids. A rook can only move horizontally and vertically from its current position and two rooks attack each other if one is on the path of the other. Given two numbers $n$ and $k$, your job is to determine the number of ways one can put $k$ rooks on an $n\times n$ chessboard so that no two of them are in attacking positions. Input The input file contains two integers $n$ ($1\leq n\leq 10$) and $k$ ($0\leq k\leq n^2$). Output Write index $I$ for given number as the first number in line. Write $I$ super-primes numbers that are items in optimal presentation for given number. Write these $I$ numbers in order of non-increasing. Sample Input 1 6 Sample Output 1 2 2 3 3 Analysis 由于 $K$ 个车每行只能放一个，所以一共有 $K!$ 种情况，一共有 $N\times N$ 的棋盘，行列选择共 $\binom{N}{k}\cdot \binom{N}{k}$ 种情况。因此，通过排列组合，我们有 $$\mathrm{ans} = \binom{N}{k}\cdot \binom{N}{k}\cdot K!$$ 化简可得 $$\mathrm{ans} = \frac{N!}{K!\cdot (N - K)!}\cdot\frac{N!}{(N - K)!}$$ Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>SGU 154 - Factorial</title>
      <link>https://kwang.life/2015/03/sgu-154-factorial/</link>
      <pubDate>Sat, 07 Mar 2015 13:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-154-factorial/</guid>
      <description>Description You task is to find minimal natural number $N$, so that $N!$ contains exactly $Q$ zeroes on the trail in decimal notation. As you know $N! = 1\cdot2\cdots N$. For example, $5! = 120$, 120 contains one zero on the trail. Input One number $Q$ written in the input ($0\leq Q\leq 10^8$). Output Write &amp;ldquo;No solution&amp;rdquo;, if there is no such number $N$, and $N$ otherwise. Sample Input 1 2 Sample Output 1 10 Analysis 统计 $N!$ 末尾 0 的个数，其实只要看因数 2 和 5 个数的最小值，因为只有 $2\times 5$ 会产生 0。然而实际上因数 2 的个数远大于因数 5 的个数，所以只要看因数 5 的个数。 由于题目给出的空间限制只有 4096KB，所以不能打表，会 MLE。百度题解以后发现可以用二分。 二分的时候统计 1 到 $N$ 这 $N$ 个数中因数 5 的个数，我们采用这样的方法：$$\mathrm{ans} = \left\lfloor\frac{N}{5}\right\rfloor + \left\lfloor\frac{N}{5^2}\right\rfloor + \left\lfloor\frac{N}{5^3}\right\rfloor + \cdots $$ 处理</description>
    </item>
    
    <item>
      <title>SGU 130 - Circle</title>
      <link>https://kwang.life/2015/03/sgu-130-circle/</link>
      <pubDate>Sat, 07 Mar 2015 11:04:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-130-circle/</guid>
      <description>Description On a circle border there are $2k$ different points $A_1, A_2, \cdots , A_{2k}$, located contiguously. These points connect $k$ chords so that each of points $A_1, A_2, \cdots, A_{2k}$ is the end point of one chord. Chords divide the circle into parts. You have to find $N$ - the number of different ways to connect the points so that the circle is broken into minimal possible amount of parts $P$. Input The first line contains the integer $k$ ($1\leq k\leq 30$). Output The first line should contain two numbers $N$ and $P$ delimited by space. Sample Input 1 2 Sample Output 1 23 Analysis 我们可以采用分治的方法，固定某个点，从其上引一条弦，将圆分成左右两部分。我们可以将这两部分看成新的圆，那么方案数就是这两个圆的方案数相乘。即：$$f[N] = \sum{\left(f[i - 1] \cdot f[N - i]\right)}$$ 其中 $1\leq i\leq N$。$f[i-1]$ 表示左边的圆，为 $k = i - 1$ 时的情况，$f[N - i]$ 为右边的圆，表示 $k = N - i$ 时的情况。这样</description>
    </item>
    
    <item>
      <title>SGU 276 - Andrew&#39;s Troubles</title>
      <link>https://kwang.life/2015/03/sgu-276-andrews-troubles/</link>
      <pubDate>Sat, 07 Mar 2015 09:48:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-276-andrews-troubles/</guid>
      <description>Description Famous Berland ACM-ICPC team Anisovka consists of three programmers: Andrew, Michael and Ilya. A long time ago, during the first few months the team was founded, Andrew was very often late to the trainings and contests. To stimulate Andrew to be more punctual, Ilya and Andrew decided to introduce a new rule for team participants. If somebody is late (i.e. comes at least one second after appointed time) he owes a cup of tea to other team members. If he is late for 5 minutes, he owes two cups of tea. If he is late for 15 minutes, he owes three cups of tea. And if he is late for 30 minutes or more, he owes 4 cups of tea. The training starts at the time $S$ (counted in seconds, from some predefined moment of time) and Andrew comes at the time $P$ (also in seconds, counted from the same moment of time). Your task is to find how many cups of tea Andrew owes. Input The input file contains single line with integer numbers $S$ and $P$ ($0\leq S, P\leq 10^4$). Output Write to the output file the number of cups Andrew owes. Sample Input #1 1 10 10 Sample Output #1 1 0 Sample Input #2 1 10 11 Sample Output #2 1 1 Sample Input #3 1 0 300 Sample Output #3 Analysis 水题。 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include</description>
    </item>
    
    <item>
      <title>SGU 126 - Boxes</title>
      <link>https://kwang.life/2015/03/sgu-126-boxes/</link>
      <pubDate>Sat, 07 Mar 2015 09:28:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/03/sgu-126-boxes/</guid>
      <description>Description There are two boxes. There are $A$ balls in the first box, and $B$ balls in the second box ($0 &amp;lt; A + B &amp;lt; 2147483648$). It is possible to move balls from one box to another. From one box into another one should move as many balls as the other box already contains. You have to determine, whether it is possible to move all balls into one box. Input The first line contains two integers $A$ and $B$, delimited by space. Output First line should contain the number $N$ - the number of moves which are required to move all balls into one box, or -1 if it is impossible. Sample Input 1 2 6 Sample Output 1 2 Analysis 模拟法 设定一个规定步数（经过反复测试，在给定的数据范围内32步即可满足要求），如果在规定步数内完成任务，则输出步数，否则输出-1。 数学法 首先我们有一个结论 $(x, y)$ 与 $\left(\frac{x}{\mathrm{gcd}(x, y)}, \frac{y}{\mathrm{gcd}(x, y)}\right)$ 具有相同的答案。 证明：我们可以运用整体的思想，将 $\mathrm{gcd}(x, y)$ 个球看成一个球。例如 5 5，我们可以看</description>
    </item>
    
    <item>
      <title>SGU 118 - Digital Root</title>
      <link>https://kwang.life/2015/02/sgu-118-digital-root/</link>
      <pubDate>Tue, 24 Feb 2015 15:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-118-digital-root/</guid>
      <description>Description Let $f(n)$ be a sum of digits for positive integer $n$. If $f(n)$ is one-digit number then it is a digital root for $n$ and otherwise digital root of $n$ is equal to digital root of $f(n)$. For example, digital root of 987 is 6. Your task is to find digital root for expression $$ A_1\cdot A_2\cdots A_N + A_1\cdot A_2\cdots A_{N-1} + \cdots + A_1\cdot A_2 + A_1$$ Input Input file consists of few test cases. There is $K$ ($1\leq K\leq 5$) in the first line of input. Each test case is a line. Positive integer number $N$ is written on the first place of test case ($N\leq 1000$). After it there are $N$ positive integer numbers (sequence $A$). Each of this numbers is non-negative and not more than $10^9$. Output Write one line for every test case. On each line write digital root for given expression. Sample Input 1 2 1 3 2 3 4 Sample Output 1 5 Analysis 结论题：$f(n) \equiv n \mod 9$。 证明如下： 令 $$n = a_0 \cdot 10^{p_0} + a_1 \cdot 10_{p_1} + \cdots + a_{m-1} \cdot 10^1 + a_m \cdot 10^0$$ 其中 $n$ 为 $m$ 位数。则 $$n \mod 9 = a_0 + a_1 + \cdots + a_{m-1} + a_m = f(n)$$ 即 $$f(n) \equiv n \mod 9$$ 证毕。 需要注意的是，当 $n \mod 9 = 0$ 的</description>
    </item>
    
    <item>
      <title>SGU 117 - Counting</title>
      <link>https://kwang.life/2015/02/sgu-117-counting/</link>
      <pubDate>Tue, 24 Feb 2015 14:14:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-117-counting/</guid>
      <description>Description Find amount of numbers for given sequence of integer numbers such that after raising them to the $M$-th power they will be divided by $K$. Input Input consists of two lines. There are three integer numbers $N, M, K$ ($0&amp;lt;N, M, K&amp;lt;10001$) on the first line. There are N positive integer numbers − given sequence (each number is not more than 10001) − on the second line. Output Write answer for given task. Sample Input 1 2 4 2 50 9 10 11 12 Sample Output 1 1 Analysis 快速幂，时间复杂度为 $O(n\log{n})$，应该是可以过的。 要注意用 int 的话会溢出，所以我直接用了 unsigned long long。 这道题目还有一个方法是质因数分解，求出 $M$ 次方以后的各个因数个数（就是把个因子个数乘以 $M$），然后和 $M$ 的个因子的个数比较即可。 Solution 快速幂 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include &amp;lt;iostream&amp;gt; using namespace</description>
    </item>
    
    <item>
      <title>SGU 104 - Little shop of flowers</title>
      <link>https://kwang.life/2015/02/sgu-104-little-shop-of-flowers/</link>
      <pubDate>Tue, 24 Feb 2015 13:13:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-104-little-shop-of-flowers/</guid>
      <description>Description You want to arrange the window of your flower shop in a most pleasant way. You have $F$ bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through $V$, where $V$ is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase $V$ is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and $F$. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch $j$ whenever $i &amp;lt; j$. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers. Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic</description>
    </item>
    
    <item>
      <title>SGU 101 - Domino</title>
      <link>https://kwang.life/2015/02/sgu-101-domino/</link>
      <pubDate>Sun, 22 Feb 2015 13:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-101-domino/</guid>
      <description>Description Dominoes – game played with small, rectangular blocks of wood or other material, each identified by a number of dots, or pips, on its face. The blocks usually are called bones, dominoes, or pieces and sometimes men, stones, or even cards. The face of each piece is divided, by a line or ridge, into two squares, each of which is marked as would be a pair of dice&amp;hellip; The principle in nearly all modern dominoes games is to match one end of a piece to another that is identically or reciprocally numbered. ENCYCLOPÆDIA BRITANNICA Given a set of domino pieces where each side is marked with two digits from 0 to 6. Your task is to arrange pieces in a line such way, that they touch through equal marked sides. It is possible to rotate pieces changing left and right side. Input The first line of the input contains a single integer $N$ ($1\leq N\leq 100$) representing the total number of pieces in the domino set. The following $N$ lines describe pieces. Each piece is represented on a separate line in a form of two digits from 0 to 6 separated by a space. Output Write &amp;ldquo;No solution&amp;rdquo;”&amp;quot; if it is impossible to arrange them described way. If it is possible, write any of way. Pieces must</description>
    </item>
    
    <item>
      <title>SGU 347 - Join the Strings</title>
      <link>https://kwang.life/2015/02/sgu-347-join-the-strings/</link>
      <pubDate>Sun, 22 Feb 2015 13:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-347-join-the-strings/</guid>
      <description>Description His Royal Highness King of Berland Berl XV was a very wise man and had a very accomplished wife, who was aware of the fact, that prominent and outstanding personalities once having written down their names on the pages of glorious History, remain there forever. His Royal Highness King Berl XV experienced an intrinsic, lost nowadays, deep and sincere sense of respect and trust for his beloved spouse. So he decided to acquire a chronicler of his own. Due to the ambiguous nature of misunderstanding and the crying injustice of history to ambiguity, he decided to leave all his royal responsibilities aside and made up his royal mind to find the chronicler, who will make him famous, depicting all his heroic deeds truthfully and gloriously enough. The King assembled the greatest minds of his kingdom at the Academic Chroniclers Meeting (ACM), as he named it, and decided to test their might. The task was to build the Smallest Lexicographical Concatenation (SLC) out of the given $N$ strings. SLC of $N$ strings $s_1,\cdots, s_N$ is the lexicographically smallest their concatenation $s_{i_1} + \cdots + s_{i_N}$, where $ i_1,\cdots, i_N $ is a permutation of integers from 1 through $N$. It&amp;rsquo;s a great privilege to be a chronicler, so don&amp;rsquo;t miss your chance and don&amp;rsquo;t screw it up! Make the king choose you! Input The first line of the input file contains a single integer $N$ ($1\leq N\leq 100$) indicating the number of strings. The following $N$ lines contain $N$ strings,</description>
    </item>
    
    <item>
      <title>SGU 151 - Construct a triangle</title>
      <link>https://kwang.life/2015/02/sgu-151-construct-a-triangle/</link>
      <pubDate>Sun, 22 Feb 2015 12:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-151-construct-a-triangle/</guid>
      <description>Description Find coordinates of any $\triangle ABC$ if it is know that $|AB|=c$, $|AC|=b$, $|AM|=m$, $AM$ is a median of triangle. Input There are three real numbers in input: $c$, $b$, $m$ ($0&amp;lt;c, b, m\leq 10^3$) separated by a space. Length of the fractional part of each number is not greater than 2 digits. Output If solution exists, write three lines. Write coordinates of point $A$ to first line, coordinates of $B$ to second line and coordinates of $C$ to third line. Separate numbers by a space; absolute value of each coordinate must not exceed $10^4$. Write numbers with 5 digits after decimal point. If there is no solution, write &amp;ldquo;Mission impossible&amp;rdquo;. Sample Input 1 5 5 3 Sample Output 1 2 3 0.00000 3.00000 -4.00000 0.00000 4.00000 0.00000 Analysis 解析几何的题目，因为是任意输出一个 $\triangle ABC$，为了简化计算，我们不妨令点 $A$ 为坐标原点，即 $A(0, 0)$。同时，我们可以令点 $B$ 在 $x$ 轴上，即 $B(c, 0)$。这样，问题就转化成了求解点 $C$ 的坐标了。根据中学有关解析几何的知识，我们可以得出下面的求解过程： 设 $C(x, y</description>
    </item>
    
    <item>
      <title>SGU 180 - Inversions</title>
      <link>https://kwang.life/2015/02/sgu-180-inversions/</link>
      <pubDate>Tue, 17 Feb 2015 11:58:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-180-inversions/</guid>
      <description>Description There are $N$ integers ($1\leq N\leq 65537$) $A_1, A_2,\cdots, A_N$ ($0\leq A_i\leq 10^9$). You need to find amount of such pairs $(i, j)$ that $1\leq i &amp;lt; j\leq N$ and $A[i]&amp;gt;A[j]$. Input The first line of the input contains the number $N$. The second line contains $N$ numbers $A_1,\cdots,A_N$. Output Write amount of such pairs. Sample Input 1 2 5 2 3 1 5 4 Sample Output 1 3 Analysis 逆序数。树状数组即可。每次更新 $A[i]$ 为 1，然后所有的逆序数就是 $$A[i] - \sum{\left(A[i] - 1\right)} + 1$$ 更新的同时获取答案。 注意答案可能会超 int，所以使用 long long。 数据中 $A[i]$ 的值过大，但是 $N$ 最大只有 65537，所以使用离散化即可，离散化只要 sort 一下，然后用 lower_bound 即可。 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 07</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-07/</link>
      <pubDate>Tue, 17 Feb 2015 11:37:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-07/</guid>
      <description>断断续续终于刷完了计算几何专题，感觉太麻烦，小错误不断，尤其是精度问题。还有输出问题，有时候 printf 比 cout 要方便。 UVaOJ 10250 给出正方形的一组对角坐标，求另外两个坐标，用三角函数推到公式。 不妨设两点为 $A(x_1, y_1)$ 和 $C(x_2, y_2)$，则中点为 $G\left(\frac{x_1 + x_2}{2}, \frac{y_1 + y_2}{2}\right)$，对角线长度为 $L = \sqrt{(x_1 - x_2)^2 - (y_1 - y_2)^2}$。 设直线 $AC$ 与 $x$ 轴的夹角为 $\alpha$，则 $$\sin\alpha = \frac{y_2 - y_1}{L},\quad \cos\alpha = \frac{x_2 - x_1}{L}$$ 则另外两个坐标分别为 $$B\left(G_x - \frac{1}{2}\cdot L \cdot \sin, G_y + \frac{1}{2}\cdot L \cdot \cos\alpha\right),\quad D\left(G_x + \frac{1}{2}\cdot L \cdot \sin\alpha, G_y - \frac{1}{2}\cdot L \cdot \cos\alpha\right)$$ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include &amp;lt;iostream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 06</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-06/</link>
      <pubDate>Fri, 13 Feb 2015 12:50:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-06/</guid>
      <description>这一次主要是数论专题，感到思维量比上一次的数学题要多多了。同样的问题也是英文题看起来有些吃力。 UVaOJ 575 这应该算不上是一个数论题，它重新定义了一种进制转换的公式，然后根据公式计算即可。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include &amp;lt;iostream&amp;gt; using namespace std; int Pow(int x, int y); int main() { string x; while(cin &amp;gt;&amp;gt; x) { if(x == &amp;#34;0&amp;#34;) { break; } int ans = 0; for(int i = 0; i &amp;lt; x.length(); i++) { ans += (x[i] - &amp;#39;0&amp;#39;) * (Pow(2, x.length() - i) - 1); } cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; } return 0; } int Pow(int x, int y) { int ret = 1; for(int i = 1; i &amp;lt;= y; i++) { ret *= x; } return ret; } UVaOJ 10110 这是一道典型的数论题，最后亮着的灯，它的开关一定被拨动了奇数次。所以，我们只要看它的因数个数</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 05</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-05/</link>
      <pubDate>Thu, 12 Feb 2015 14:24:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-05/</guid>
      <description>刷完了数学专题，感觉思维量有些大，同时也对浮点数的运算有些接触。最重要的还是感觉有时候题目读起来有些吃力，需要借助中文翻译。 UVaOJ 113 这道题目是集训的时候第一天晚上的题目，据说可以 double 解决，当时没有 AC。 现在重新做了一遍，需要注意的是最后输出的结果一定要转换成int，否则会 WA。 同时，double 转换为 int 的时候可以采取这样的方式：(int)floor(x + 0.5)。 1 2 3 4 5 6 7 8 9 10 11 12 #include &amp;lt;iostream&amp;gt; #include &amp;lt;math.h&amp;gt; using namespace std; int main() { double x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { cout &amp;lt;&amp;lt; (int)floor(pow(y, 1 / x) + 0.5) &amp;lt;&amp;lt; endl; } return 0; } UVaOJ 10161 这道题目是通常的找规律题目，和一道《Canto</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 04</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-04/</link>
      <pubDate>Wed, 11 Feb 2015 17:18:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-04/</guid>
      <description>断断续续的把排序和检索专题刷完了，感觉英语还是不够，题目太长以后看起来就会很吃力。 还有一点感触就是 STL 的广泛应用。学到了很多新东西。 当然，不能忍受的就是答案最后多输出一行空行，UVaOJ 会判 WA。 UVaOJ 340 简单模拟题，一开始没有看懂题目。百度以后才明白的题意。朴素模拟以后即可得到答案。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include &amp;lt;iostream&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 1024; int pCode[MAX], pGuess[MAX], pVisited[MAX]; int main() { int N, nCase = 0; while(cin &amp;gt;&amp;gt; N) { if(N == 0) { break; } memset(pCode, 0, sizeof(pCode)); for(int i = 1; i &amp;lt;= N; i++) { cin &amp;gt;&amp;gt; pCode[i]; } cout &amp;lt;&amp;lt; &amp;#34;Game &amp;#34;</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 03</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-03/</link>
      <pubDate>Sun, 08 Feb 2015 14:02:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-03/</guid>
      <description>今天刷了高精度专题，本来准备写一个高精度类，然后直接套模版，后来发现根据每题的要求分开写高精度反而效率高。 主要涉及了高精度加法、乘法、除法、取余（其中后两项为高精度和低精度进行运算）。 终于打过一遍高精度除以低精度了，高精度专题也算圆满了。 UVaOJ 424 高精度加法，水题。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;memory.h&amp;gt; using namespace std; const int MAX = 10240; int nLen; int pData[MAX]; int main() { nLen = 1; memset(pData, 0, sizeof(pData)); string x; while(cin &amp;gt;&amp;gt; x) { if(x != &amp;#34;0&amp;#34;) { while(x[0] == &amp;#39;0&amp;#39;) { x = x.substr(1, x.length() - 1); } nLen = max(nLen, (int)x.length()); for(int i = 1; i &amp;lt;= x.length(); i++) { pData[i] += x[x.length() - i] - &amp;#39;0&amp;#39;; pData[i + 1] += pData[i] / 10; pData[i] %= 10; }</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 02</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-02/</link>
      <pubDate>Sat, 07 Feb 2015 19:29:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-02/</guid>
      <description>今天刷了小白书的字符串专题，各种 WA 以及 PE。UVaOJ 中有时候会把 PE 判成 WA，这样会导致很难查错。 UVa 401 这道题目有个坑，只有表格中列出的才是镜像字母，没有列出了的表示没有镜像字母，在这上 WA 了一次。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; using namespace std; const char pAlphabet[] = { &amp;#39;A&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;J&amp;#39;, &amp;#39;M&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;S&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;*&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;*&amp;#39; }; bool Palindrome(string x); bool Mirrored(string x); int main() { string x; while(cin &amp;gt;&amp;gt; x) { if(!Palindrome(x)) { if(Mirrored(x)) { cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; -- is a mirrored string.&amp;#34; &amp;lt;&amp;lt; endl; } else { cout &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>REFLECTIONS</title>
      <link>https://kwang.life/2015/02/reflections/</link>
      <pubDate>Fri, 06 Feb 2015 20:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/reflections/</guid>
      <description>刚刚结束了 ACM 的集训，仔细反思了第一学期的大学学习生活。 首先要说的是上课，在一开始的时候，我每次都会提前很久去占座。但是这样的情况并没有持续很久，有一段时间由于感觉老师讲得太慢，经常上课开小差。但是事后自习想了想，还是决定回到开学时的状态。但是这时候我却惊讶的发现，并不需要占座了，就算是踩着上课铃去上课，也依旧可以坐到第一排（线性代数除外）。解决了态度问题，接下来还是有一个不可回避的问题，有时候觉得讲得太慢，不想听。所以就带了自己的书，讲到不懂的，就认真听课，其余时间就好好看自己的书，学习别的东西</description>
    </item>
    
    <item>
      <title>ACM-ICPC 寒假练习 01</title>
      <link>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-01/</link>
      <pubDate>Fri, 06 Feb 2015 17:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/acm-icpc-%E5%AF%92%E5%81%87%E7%BB%83%E4%B9%A0-01/</guid>
      <description>这一系列的练习主要在 Virtual Judge 上进行，题目为小白书上的题目推荐。 UVa 10055 求两方军队人数的差值，直接相减即可。 不过要注意两个数的大小关系。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;iostream&amp;gt; using namespace std; int main() { long long x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { if(x &amp;gt; y) { swap(x, y); } cout &amp;lt;&amp;lt; y - x &amp;lt;&amp;lt; endl; } return 0; } UVa 10071 简单物理题，求两倍时间内匀速运动的路程。即 $s = 2vt$。 1 2 3 4 5 6 7 8 9 10 11 #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int x, y; while(cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y) { cout &amp;lt;&amp;lt; x * y * 2 &amp;lt;&amp;lt; endl; } return 0; } UVa 10300 根据题目描述推导公式，$$ \mathrm{ans} = \sum{\left(\frac{x}{y}\cdot y\cdot z\right)} = \sum{xz}$$ 题中讲到了首先计算每只动物的占地面积，乘以环境友好常数，再乘以动物数目。这里可以直接将动</description>
    </item>
    
    <item>
      <title>SGU 127 - Telephone directory</title>
      <link>https://kwang.life/2015/02/sgu-127-telephone-directory/</link>
      <pubDate>Thu, 05 Feb 2015 21:30:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-127-telephone-directory/</guid>
      <description>Description CIA has decided to create a special telephone directory for its agents. The first 2 pages of the directory contain the name of the directory and instructions for agents, telephone number records begin on the third page. Each record takes exactly one line and consists of 2 parts: the phone number and the location of the phone. The phone number is 4 digits long. Phone numbers cannot start with digits 0 and 8. Each page of the telephone directory can contain not more then $K$ lines. Phone numbers should be sorted in increasing order. For the first phone number with a new first digit, the corresponding record should be on a new page of the phone directory. You are to write a program, that calculates the minimal number P pages in the directory. For this purpose, CIA gives you the list of numbers containing $N$ records, but since the information is confidential, without the phones locations. Input The first line contains a natural number $K$ ($0 &amp;lt; K &amp;lt; 255$) - the maximum number of lines that one page can contain. The second line contains a natural $N$ ($0 &amp;lt; N &amp;lt; 8000$) - number of phone numbers supplied. Each of following $N$ lines contains a number consisting of 4 digits - phone numbers in any order, and it is known, that numbers in this list cannot repeat. Output First line should contain a natural number $P$ - the number of pages in the telephone directory. Sample Input 1</description>
    </item>
    
    <item>
      <title>SGU 107 - 987654321 problem</title>
      <link>https://kwang.life/2015/02/sgu-107-987654321-problem/</link>
      <pubDate>Thu, 05 Feb 2015 14:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/02/sgu-107-987654321-problem/</guid>
      <description>Description For given number $N$ you must output amount of $N$-digit numbers, such, that last digits of their square is equal to 987654321. Input Input contains integer number $N$ ($1\leq N\leq 10^6$). Output Write answer in output file. Sample Input 1 8 Sample Output 1 0 Analysis 在一定意义上，这也是一道数学题。 由于一个数平方的后X位，只与这个数字的后X位有关系，所以我们不妨使用下面的程序打一个表来看一下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include &amp;lt;iostream&amp;gt; using namespace std; int main() { // sqrt(987654321) &amp;gt; 30000 for(long long i = 30000; i &amp;lt;= 999999999; i++) { long long x = i * i; if(x % 1000000000 == 987654321) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } } return 0; } 打完表以后，我们发现只有 8 个数字满足条件，而且分布在 100,000,000 到 999,999,999 之间。 下面我们来推导满足题目条件的答案与输入的位数 $N$ 的关系：$$\mathrm{ans} = \begin{cases}0, &amp;amp; N \leq</description>
    </item>
    
    <item>
      <title>SGU 184 - Patties</title>
      <link>https://kwang.life/2015/01/sgu-184-patties/</link>
      <pubDate>Fri, 30 Jan 2015 17:57:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-184-patties/</guid>
      <description>Description Petya is well-known with his famous cabbage patties. Petya&amp;rsquo;s birthday will come very soon, and he wants to invite as many guests as possible. But the boy wants everybody to try his specialty of the house. That&amp;rsquo;s why he needs to know the number of the patties he can cook using the stocked ingredients. Petya has $P$ grams of flour, $M$ milliliters of milk and $C$ grams of cabbage. He has plenty of other ingredients. Petya knows that he needs $K$ grams of flour, $R$ milliliters of milk and $V$ grams of cabbage to cook one patty. Please, help Petya calculate the maximum number of patties he can cook. Input The input file contains integer numbers $P$, $M$, $C$, $K$, $R$ and $V$, separated by spaces and/or line breaks ($1 \leq P, M, C, K, R, V \leq 10000$). Output Output the maximum number of patties Petya can cook. Sample Input 1 2 3000 1000 500 30 15 60 Sample Output 1 8 Analysis 简单的数学分析就知道，所求答案为 $\left\lfloor\frac{P}{K}\right\rfloor$，$\left\lfloor\frac{M}{R}\right</description>
    </item>
    
    <item>
      <title>SGU 135 - Drawing Lines</title>
      <link>https://kwang.life/2015/01/sgu-135-drawing-lines/</link>
      <pubDate>Thu, 29 Jan 2015 21:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-135-drawing-lines/</guid>
      <description>Description Little Johnny likes to draw a lot. A few days ago he painted lots of straight lines on his sheet of paper. Then he counted in how many zones the sheet of paper was split by these lines. He noticed that this number is not always the same. For instance, if he draws 2 lines, the sheet of paper could be split into 4, 3 or even 2 (if the lines are identical) zones. Since he is a very curious kid, he would like to know which is the maximum number of zones into which he can split the sheet of paper, if he draws $N$ lines. The sheet of paper is to be considered a very large (=infinite) rectangle. Input The input file will contain an integer number: $N$ ($0\leq N\leq 65535$). Output You should output one integer: the maximum number of zones into which the sheet of paper can be split if Johnny draws $N$ lines. Sample Input #1 1 0 Sample Output #1 1 1 Sample Input #2 1 1 Sample Output #2 1 2 Analysis 数学题。直线分平面数，我们也可以通过找规律的方法来求出它的公式： 线段数 $N$ 平面数 $M$ 0 1 1 1 + 1 = 2 2 2 + 2 = 4 3 4 + 3 = 7 4 7 + 4 = 11 5 11 + 5</description>
    </item>
    
    <item>
      <title>SGU 123 - The Sum</title>
      <link>https://kwang.life/2015/01/sgu-123-the-sum/</link>
      <pubDate>Thu, 29 Jan 2015 21:03:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-123-the-sum/</guid>
      <description>Description The Fibonacci sequence of numbers is known: $F_1 = 1$; $F_2 = 1$; $F_{n+1} = F_n + F_{n-1}$, for $n&amp;gt;1$. You have to find $S$ - the sum of the first $K$ Fibonacci numbers. Input First line contains natural number $K$ ($0&amp;lt;K&amp;lt;41$). Output First line should contain number $S$. Sample Input 1 5 Sample Output 1 12 Analysis 考虑到数据范围，这道题目只要模拟一下就行了。但是我还是比较喜欢使用数学方法来求解。 令 $S_n$ 表示斐波那契数列的前 $N$ 项和，那么我们很容易求得 $S_n = F_{n+2} - 1$。 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;iostream&amp;gt; using namespace std; const int MAX = 64; int f[MAX]; int main() { int N; cin &amp;gt;&amp;gt; N; f[1] = f[2] = 1; for(int i = 3; i &amp;lt;= N + 2; i++) { f[i] = f[i - 1] + f[i - 2]; } cout &amp;lt;&amp;lt; f[N + 2] - 1 &amp;lt;&amp;lt; endl; return 0; } 这道题目应该是非常简单的。当然，如果你不知道斐波那契数列可以在$O(n)$时间内求</description>
    </item>
    
    <item>
      <title>SGU 105 - Div 3</title>
      <link>https://kwang.life/2015/01/sgu-105-div-3/</link>
      <pubDate>Thu, 29 Jan 2015 20:48:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-105-div-3/</guid>
      <description>Description There is sequence 1, 12, 123, 1234, &amp;hellip;, 12345678910, &amp;hellip; . Given first $N$ elements of that sequence. You must determine amount of numbers in it that are divisible by 3. Input Input contains $N$ ($1\leq N\leq 2^{31} - 1$). Output Write answer in output file. Sample Input 1 4 Sample Output 1 2 Analysis 由于一个数对 $3$ 取模恒等于这个数各个位上数字之和对 $3$ 取模。因此，非常容易想到的方法是找规律： 项数 $N$ 数列 除以 $3$ 的余数 答案 $ans$ 1 1 1 0 2 12 0 1 3 123 0 2 4 1234 1 2 5 12345 0 3 6 123456 0 4 7 1234567 1 4 8 12345678 0 5 9 123456789 0 6 由上述表格，我们可以大致的看出规律，即：$$\mathrm{ans} = \begin{cases} \mathrm{ans}, &amp;amp; N \mod 3 = 1\\ \mathrm{ans} + 1, &amp;amp; N \mod 3 = 0, 2\end{cases}$$ 有了上述的讨论，我们可以很容易的写出一个暴力算法，但是考虑到 $N$ 的数据范围比较大，这并不是一个</description>
    </item>
    
    <item>
      <title>SGU 102 - Coprimes</title>
      <link>https://kwang.life/2015/01/sgu-102-coprimes/</link>
      <pubDate>Thu, 29 Jan 2015 20:17:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-102-coprimes/</guid>
      <description>Description For given integer $N$ ($1\leq N\leq 10^4$) find amount of positive numbers not greater than $N$ that coprime with $N$. Let us call two positive integers (say, $A$ and $B$, for example) coprime if (and only if) their greatest common divisor is 1. (i.e. $A$ and $B$ are coprime iff $\mathrm{gcd}\left(A,B\right) = 1$). Input Input file contains integer $N$. Output Write answer in output file. Sample Input 1 9 Sample Output 1 6 Analysis 我首先想到的是欧拉函数 $\varphi\left(N\right)$，后来发现数据量并不是特别的大，所以又用暴力做了一遍，也 AC 了。 这道题目的重点在于欧拉函数 $\varphi\left(N\right)$ 的求法，现总结如下： 欧拉函数 $\varphi\left(N\right)$：小于等于 $N$ 且与 $N$ 互素的正整数的个数。 欧拉函数据有如下性质： $\varphi\left(1\right) = 1$ $\varphi\left(N\right) = N\cdot\sum_{p|N}{\left(\</description>
    </item>
    
    <item>
      <title>SGU 100 - A &#43; B</title>
      <link>https://kwang.life/2015/01/sgu-100-a--b/</link>
      <pubDate>Thu, 29 Jan 2015 20:08:00 +0800</pubDate>
      
      <guid>https://kwang.life/2015/01/sgu-100-a--b/</guid>
      <description>[100. A+B] Description Read integers $A$ and $B$ from input file and write their sum in output file. Input Input file contains $A$ and $B$ ($0&amp;lt;A,B&amp;lt;10001$). Output Write answer in output file. Sample Input 1 5 3 Sample Output 1 8 Analysis 水题。 Solution 1 2 3 4 5 6 7 8 9 10 11 #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int a, b; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl; return 0; } 到了大学，开始接触 ACM。高中里参加了 3 年 NOIP，拿了两年的二等奖，现在终于接触到了 ACM，找到了 SGU 这个 OJ 开始刷题。 一方面，这上面的题目都有些难度，另一方面，由于是英文的，可以在一定程度上提高我的英语水平。 我是按照 SGU 上题目的 AC 数来刷的，并不是完全按照编号往下刷的。</description>
    </item>
    
    <item>
      <title>甲午志（2014 年度总结）</title>
      <link>https://kwang.life/2014/12/%E7%94%B2%E5%8D%88%E5%BF%972014-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 31 Dec 2014 20:38:00 +0800</pubDate>
      
      <guid>https://kwang.life/2014/12/%E7%94%B2%E5%8D%88%E5%BF%972014-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>2015 时光匆匆流去，转眼又已迎来新的一年。按照惯例，应该写篇文章总结一下，突然发现要说的事情太多了。各位看官且莫着急，听我慢慢道来。 总的来说，整个 2014 感觉过的很漫长，这似乎和某个研究结果相符：每天遇到的事件越多，觉得一天的时间越长。我想这大概是因为这一年发生过太多事情的缘故吧。面对着早已习惯的分别，也已变得不太在意。要说总结，我也不知道该怎么总结。对我来说，这一年只有两个阶段：为了高考奋斗、进入大学学习。当然，除此之外也干了很多有意义的事。且从头说起罢。 还记得刚过年的时候，想想上学这么多年也没怎么认真</description>
    </item>
    
    <item>
      <title>期中随记</title>
      <link>https://kwang.life/2014/12/%E6%9C%9F%E4%B8%AD%E9%9A%8F%E8%AE%B0/</link>
      <pubDate>Wed, 10 Dec 2014 23:28:00 +0800</pubDate>
      
      <guid>https://kwang.life/2014/12/%E6%9C%9F%E4%B8%AD%E9%9A%8F%E8%AE%B0/</guid>
      <description>其实期中考试上上周就考完了，只是这几天才出分数。客观的来说，不算低了，却觉得不够。就好像今天刚刚结束的第二场ACM校选赛，第三名，却觉得为什么不是第一名。 很久之前就有人回复我说，为什么还不更新博客。自从开学以来，忙东忙西，一直没有时间，因为我自己也不知道大学究竟是什么，回想起之前写过的一篇《我为什么要上大学》，总觉得讲不到点子上，有很多想法没有表达出来，看来很有可能会诞生一篇续集吧。 几天前，Godaddy 给我发了一封电子邮件，说我的域名要到期了，突然意识到这个小小的博客已经存在了将近两年了。在这</description>
    </item>
    
    <item>
      <title>浅谈等价无穷小量代换原理</title>
      <link>https://kwang.life/2014/11/%E6%B5%85%E8%B0%88%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E9%87%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 01 Nov 2014 00:33:00 +0800</pubDate>
      
      <guid>https://kwang.life/2014/11/%E6%B5%85%E8%B0%88%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F%E9%87%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E7%90%86/</guid>
      <description>高数教了一段时间了，对于等价无穷小量代换法求极限为什么只能在乘除中使用，而不能在加减的情况下使用的条件感到有些疑惑，于是找了一些资料，仔细的研究了这个问题，整理如下： 等价无穷小的定义及常用的等价无穷小 无穷小量是指某变化过程中极限为 $ 0 $ 的变量。而等价无穷小量是指在某变化过程中比值极限为 $ 1 $ 的两个无穷小量。 常用的等价无穷小有： $$ \sin{x}\sim \tan{x}\sim\arctan{x}\sim\arcsin{x}\sim \ln{\left(1+x \right )}\sim x\left(x\rightarrow 0\right ) $$ $$ 1-\cos{x}\sim \frac{x^{2}}{2},\sqrt[n]{1+x}-1\sim \frac{x}{n} \left(x\rightarrow 0\right ) $$ 等价无穷小量在求极限问题中非常重要。恰当的使用等价无穷小量代换常常使极限问题大大简化。但是有时却不能使用等价无穷小量代换。 等价无穷小替换</description>
    </item>
    
    <item>
      <title>我为什么要读大学</title>
      <link>https://kwang.life/2014/10/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%AF%BB%E5%A4%A7%E5%AD%A6/</link>
      <pubDate>Sat, 18 Oct 2014 23:13:00 +0800</pubDate>
      
      <guid>https://kwang.life/2014/10/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%AF%BB%E5%A4%A7%E5%AD%A6/</guid>
      <description>自从上了大学以后，时常想起浅栖的一篇文章《为什么要读大学》。我也一直在思考，我为什么要读大学，前几天看了朱秀林校长的演讲，他也问了同样的问题，为什么要读大学，这是一个基本的问题，想明白了这个问题，可以解决很多问题。利用一节高数课，我仔细的思考了这个问题，并给出了自己的答案——为了成为更完整的人。 还记得高中里，常常听别人说起，现在辛苦一点，到了大学里就会轻松很多。到了大学里才发现，其实大学比高三辛苦多了，说轻松只是相对于那些高中不认真的人来说，想要达到同一高度，是轻松一些。但是如果对自己有更高的要</description>
    </item>
    
    <item>
      <title>中秋望月感怀（2014）</title>
      <link>https://kwang.life/2014/09/%E4%B8%AD%E7%A7%8B%E6%9C%9B%E6%9C%88%E6%84%9F%E6%80%802014/</link>
      <pubDate>Mon, 08 Sep 2014 22:10:00 +0800</pubDate>
      
      <guid>https://kwang.life/2014/09/%E4%B8%AD%E7%A7%8B%E6%9C%9B%E6%9C%88%E6%84%9F%E6%80%802014/</guid>
      <description>月 水调歌头 丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。 明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？ 转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。 &amp;lt; music netease song 225636 &amp;gt; 今年，可以说是一个转折点。高考结束了，以前经常以前玩的小伙伴不得不面临分别，各奔东西。有的还没有开学，有的却早已开学，独自在异乡漂泊，在这个理当团聚的日子，承受着难言的乡愁。 「今夜月明人尽望，不知秋思落谁家</description>
    </item>
    
  </channel>
</rss>
