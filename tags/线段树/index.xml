<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>线段树 on ExampleSite</title>
    <link>https://kwang.life/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
    <description>Recent content in 线段树 on ExampleSite</description>
    <image>
      <title>ExampleSite</title>
      <url>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kwang.life/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Aug 2013 21:16:00 +0800</lastBuildDate><atom:link href="https://kwang.life/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线段树 – 有改动求解区间最值 – 忠诚 2</title>
      <link>https://kwang.life/posts/2013/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%89%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A-2/</link>
      <pubDate>Tue, 27 Aug 2013 21:16:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2013/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%89%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A-2/</guid>
      <description>忠诚 2 是忠诚的一个提升版本。我们在之前的一篇文章线段树 – 无改动求解区间最值 – 忠诚简单的谈了一下关于无改动求解区间最值的问题。现在我们来研究一下有改动求解区间最值。
首先，我们考虑改动某个值以后，对整棵树重新进行维护。但是很快我们发现，这样的复杂度太大。因为每次只更改一个值，所以只涉及到一条路径，因此我们考虑在递归修改数值的时候，可以标记一下经过的结点，修改完成以后，只对标记过的结点进行维护。这样我们的代码就出来了：
int Update(Node *pNode) { if(pNode-&amp;gt;nLeft == pNode-&amp;gt;nRight || pNode-&amp;gt;nMoney != 2147483647) { return pNode-&amp;gt;nMoney; } else { return pNode-&amp;gt;nMoney = min(Update(pNode-&amp;gt;pLeft), Update(pNode-&amp;gt;pRight)); } } void Change(Node *pNode, int x, int nValue) { pNode-&amp;gt;nMoney = 2147483647; if(pNode-&amp;gt;nLeft == x &amp;amp;&amp;amp; x == pNode-&amp;gt;nRight) { pNode-&amp;gt;nMoney = nValue; } else { if(x &amp;lt;= (pNode-&amp;gt;nLeft + pNode-&amp;gt;nRight) / 2) { Change(pNode-&amp;gt;pLeft, x, nValue); } else { Change(pNode-&amp;gt;pRight, x, nValue); } } } 这样，除了第一次维护外，每次我们只需要维护一条路径，复杂度也大大降低低了。</description>
    </item>
    
    <item>
      <title>线段树 – 无改动求解区间最值 – 忠诚</title>
      <link>https://kwang.life/posts/2013/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%97%A0%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A/</link>
      <pubDate>Tue, 27 Aug 2013 21:06:00 +0800</pubDate>
      
      <guid>https://kwang.life/posts/2013/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%97%A0%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A/</guid>
      <description>昨天研究了一下线段树，发现原来线段树有这么多实现方式。当然，对于非递归自底向上线段树，俗称 ZKW 线段树还是不太理解。而且我的实现方式还是用的指针，所以效率不是特别高。首先记录一下自己对于线段树的理解吧。我们用忠诚这道题目来做例子。
线段树可以直观的表示为下面这张图：
线段树示意图
对于一个给定的区间，不断的二分，直到区间变为一个点为止。当然，平时我们所需要的线段树不是这么简陋的，我们需要一些数据域：
struct Node { int nLeft, nRight; unsigned long long nMoney; Node *pLeft, *pRight; }; 有了节点的数据结构，我们需要构建这棵树，我们使用递归的方式生成这棵树，当然，在生成的过程中也可以进行一些初始化操作：
Node* Build(int l, int r) { Node *pNode = new Node(); // Init data if(l == r) { pNode-&amp;gt;nMoney = pMoney[l - 1]; } else { pNode-&amp;gt;nMoney = 0; } pNode-&amp;gt;nLeft = l; pNode-&amp;gt;nRight = r; if(l == r) { return pNode; } int nMid = (l + r) / 2; pNode-&amp;gt;pLeft = Build(l, nMid); pNode-&amp;gt;pRight = Build(nMid + 1, r); return pNode; } 接下来就是线段树最核心的部分了，查找。查找的时候可能有三种情况：</description>
    </item>
    
  </channel>
</rss>
