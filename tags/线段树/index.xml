<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>线段树 - 标签 - 寸方斋</title><link>https://example.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link><description>线段树 - 标签 - 寸方斋</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>suda.ivywk@gmail.com (Kai Wang)</managingEditor><webMaster>suda.ivywk@gmail.com (Kai Wang)</webMaster><copyright>本作品采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可</copyright><lastBuildDate>Tue, 27 Aug 2013 21:16:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/" rel="self" type="application/rss+xml"/><item><title>线段树 – 有改动求解区间最值 – 忠诚 2</title><link>https://example.com/2013/08/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%89%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A-2/</link><pubDate>Tue, 27 Aug 2013 21:16:00 +0800</pubDate><author>作者</author><guid>https://example.com/2013/08/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%89%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A-2/</guid><description><![CDATA[<p>忠诚 2 是忠诚的一个提升版本。我们在之前的一篇文章<a href="/2013/08/%e7%ba%bf%e6%ae%b5%e6%a0%91-%e6%97%a0%e6%94%b9%e5%8a%a8%e6%b1%82%e8%a7%a3%e5%8c%ba%e9%97%b4%e6%9c%80%e5%80%bc-%e5%bf%a0%e8%af%9a/" rel="">线段树 – 无改动求解区间最值 – 忠诚</a>简单的谈了一下关于无改动求解区间最值的问题。现在我们来研究一下有改动求解区间最值。</p>
<p>首先，我们考虑改动某个值以后，对整棵树重新进行维护。但是很快我们发现，这样的复杂度太大。因为每次只更改一个值，所以只涉及到一条路径，因此我们考虑在递归修改数值的时候，可以标记一下经过的结点，修改完成以后，只对标记过的结点进行维护。这样我们的代码就出来了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span> <span class="o">||</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">!=</span> <span class="mi">2147483647</span><span class="p">)</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">),</span> <span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Change</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nValue</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">nValue</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="n">Change</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">nValue</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span> <span class="n">Change</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">nValue</span><span class="p">);</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样，除了第一次维护外，每次我们只需要维护一条路径，复杂度也大大降低低了。</p>
<p>附上忠诚 2 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nLeft</span><span class="p">,</span> <span class="n">nRight</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">nMoney</span><span class="p">;</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pLeft</span><span class="p">,</span> <span class="o">*</span><span class="n">pRight</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Node</span> <span class="o">*</span><span class="n">pRoot</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">nTmp</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">ans</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pMoney</span><span class="p">;</span>

<span class="n">Node</span><span class="o">*</span> <span class="nf">Build</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">Change</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nValue</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">Query</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nTmp</span><span class="p">;</span>
        <span class="n">pMoney</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nTmp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">pRoot</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
    <span class="n">Update</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span> <span class="o">&gt;&gt;</span> <span class="n">L</span> <span class="o">&gt;&gt;</span> <span class="n">R</span><span class="p">;</span> 
        <span class="k">if</span><span class="p">(</span><span class="n">T</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Query</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">Change</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">);</span>
            <span class="n">Update</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Node</span><span class="o">*</span> <span class="nf">Build</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">pMoney</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">);</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span> <span class="o">||</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">!=</span> <span class="mi">2147483647</span><span class="p">)</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">),</span> <span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Change</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nValue</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">nValue</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="n">Change</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">nValue</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span> <span class="n">Change</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">nValue</span><span class="p">);</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">Query</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">),</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>线段树 – 无改动求解区间最值 – 忠诚</title><link>https://example.com/2013/08/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%97%A0%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A/</link><pubDate>Tue, 27 Aug 2013 21:06:00 +0800</pubDate><author>作者</author><guid>https://example.com/2013/08/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%97%A0%E6%94%B9%E5%8A%A8%E6%B1%82%E8%A7%A3%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC-%E5%BF%A0%E8%AF%9A/</guid><description><![CDATA[<p>昨天研究了一下线段树，发现原来线段树有这么多实现方式。当然，对于非递归自底向上线段树，俗称 ZKW 线段树还是不太理解。而且我的实现方式还是用的指针，所以效率不是特别高。首先记录一下自己对于线段树的理解吧。我们用忠诚这道题目来做例子。</p>
<p>线段树可以直观的表示为下面这张图：</p>
<figure><a class="lightgallery" href="/images/2013/%e7%ba%bf%e6%ae%b5%e6%a0%91%20%e2%80%93%20%e6%97%a0%e6%94%b9%e5%8a%a8%e6%b1%82%e8%a7%a3%e5%8c%ba%e9%97%b4%e6%9c%80%e5%80%bc%20%e2%80%93%20%e5%bf%a0%e8%af%9a/%e7%ba%bf%e6%ae%b5%e6%a0%91.jpg" title="/images/2013/线段树 – 无改动求解区间最值 – 忠诚/线段树.jpg" data-thumbnail="/images/2013/线段树 – 无改动求解区间最值 – 忠诚/线段树.jpg" data-sub-html="<h2>线段树示意图</h2>">
        
    </a><figcaption class="image-caption">线段树示意图</figcaption>
    </figure>
<p>对于一个给定的区间，不断的二分，直到区间变为一个点为止。当然，平时我们所需要的线段树不是这么简陋的，我们需要一些数据域：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nLeft</span><span class="p">,</span> <span class="n">nRight</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">nMoney</span><span class="p">;</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pLeft</span><span class="p">,</span> <span class="o">*</span><span class="n">pRight</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>有了节点的数据结构，我们需要构建这棵树，我们使用递归的方式生成这棵树，当然，在生成的过程中也可以进行一些初始化操作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">Node</span><span class="o">*</span> <span class="nf">Build</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">();</span>
    <span class="c1">// Init data
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">pMoney</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>

    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">);</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>接下来就是线段树最核心的部分了，查找。查找的时候可能有三种情况：</p>
<ul>
<li>所需要查询的区间全部落在左儿子的区间中，递归左儿子。</li>
<li>所需要查询的区间全部落在右儿子的区间中，递归右儿子。</li>
<li>所需要查询的区间一部分在左儿子的区间中，另一部分在右儿子的区间中，递归左儿子，右儿子，根据需要进行一些操作，例如相加，取最大最小等。</li>
</ul>
<p>实现部分如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">Query</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">),</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>但是上面的代码要递归很久才返回数据，有很多的重复运算，这样在数据量很大的情况下非常不理想，所以我们需要进行一些优化。我们可以考虑提前把每个区间的最值求出来，因为原来只有点区间才有数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">),</span> <span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样，这棵线段树的效率就得到了很大的提高。</p>
<p>附上忠诚代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nLeft</span><span class="p">,</span> <span class="n">nRight</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">nMoney</span><span class="p">;</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pLeft</span><span class="p">,</span> <span class="o">*</span><span class="n">pRight</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Node</span> <span class="o">*</span><span class="n">pRoot</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">nTmp</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">ans</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pMoney</span><span class="p">;</span>

<span class="n">Node</span><span class="o">*</span> <span class="nf">Build</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">Query</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nTmp</span><span class="p">;</span>
        <span class="n">pMoney</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nTmp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">pRoot</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
    <span class="n">Update</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">L</span> <span class="o">&gt;&gt;</span> <span class="n">R</span><span class="p">;</span> 
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Query</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Node</span><span class="o">*</span> <span class="nf">Build</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">pMoney</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">);</span>
    <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span> <span class="o">=</span> <span class="n">Build</span><span class="p">(</span><span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">pNode</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span>
    <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">),</span> <span class="n">Update</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">Query</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">pNode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nMoney</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">{</span> <span class="k">return</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">pNode</span><span class="o">-&gt;</span><span class="n">nRight</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pLeft</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">nMid</span><span class="p">),</span> <span class="n">Query</span><span class="p">(</span><span class="n">pNode</span><span class="o">-&gt;</span><span class="n">pRight</span><span class="p">,</span> <span class="n">nMid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>